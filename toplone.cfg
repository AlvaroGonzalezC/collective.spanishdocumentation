[buildout]
parts += 
    toplone
    test
    lxml

extends +=
    sources.cfg
    versions.cfg

#
# Recipe to create toplone command.
# 
# It will walk through all blueprints defined
# in pipeline.cfg and override their target parameter
# to be a remote Plone site given on the command line.
# This all happeins in initialization= magic.
#
# Also Python logger is initialized to give us verbose
# output. Some blueprints use logging module for the output.
#
#[toplone]
#recipe = zc.recipe.egg
#eggs =
#  transmogrify.htmltesting
#  transmogrify.webcrawler
#  transmogrify.siteanalyser
#  transmogrify.htmlcontentextractor
#  transmogrify.pathsorter
#  transmogrify.ploneremote
#  
## This initialization script sets remote site argument
## for remote blueprints defined in pipeline.cfg
#initialization =
#  from urllib import pathname2url as url
#  from sys import argv
#  import logging, os
#  
#  logging.basicConfig(level=logging.DEBUG)
#  target=len(argv) > 1 and argv[1] or ''
#  args = dict(webcrawler=dict(site_url='file://'+os.getcwd()+'/build/html/'),
#      localconstructor=dict(output=url('ploneout')),
#      ploneuploader=dict(target=target),
#      )
#arguments = 'pipeline.cfg', args
#entry-points = toplone=transmogrify.htmltesting.runner:runner


#
# Recipe to create toplone command.
# 
# Using the funnelweb blueprint to create a script
# to convert and upload the manual as plone content
# bin/toplone --ploneupload=http://admin:admin@localhost:8080/Plone
# use --template1:debug to get extra detail on fields extracted from pages.
# use --changetype:value="python:item['_type']" if you want to test on plone site without PHC
# see http://plone.org/products/funnelweb
#
[toplone]
recipe = funnelweb
crawler-url=file://${buildout:directory}/build/html
crawler-ignore=
	cgi-bin
	javascript:
	_static
	_sources
	genindex\.html
	search\.html
	saesrchindex\.js
# Since content is from disk, no need for local cache
cache-output =

# Fields with '_' won't be uploaded to Plone so will be effectively removed 
template1-title = text //div[@class='body']//h1[1]
template1-_permalink = text //div[@class='body']//a[@class='headerlink']
template1-text = html //div[@class='body']
template1-_label = optional //p[contains(@class,'admonition-title')]
template1-description = optional //div[contains(@class,'admonition-description')]/p[@class='last']/text()
template1-_remove_useless_links = optional //div[@id = 'indices-and-tables']
templateauto-condition = python:False

#attachmentguess-condition = python: subitem.get('_type') in ['Image']
#attachmentguess-defaultpage = index

# Images will get titles from backlink text
titleguess-condition = python:True
indexguess-condition = python:True

# Hide the images folder from navigation
hideguess-condition = python:item.get("_path","").startswith('_images') and item.get('_type')=='Folder'

# Upload as PHC instead of Folders and Pages 
changetype-value=python:{'Folder':'HelpCenterReferenceManualSection','Document':'HelpCenterLeafPage'}.get(item['_type'],item['_type'])

# Save locally for debugging purposes
# WARNING: not currently working
#localupload-output=${buildout:directory}/ploneout

# All folderish content should be checked if they contain
# any items on the remote site which are not presented locally. including base folder
ploneprune-condition=python:item.get('_type') in ['HelpCenterReferenceManualSection','HelpCenterReferenceManual'] or item['_path'] == ''


[test]
recipe = zc.recipe.testrunner
eggs =
  ${toplone:eggs}
  transmogrify.htmltesting

[lxml]
recipe = z3c.recipe.staticlxml
egg = lxml
