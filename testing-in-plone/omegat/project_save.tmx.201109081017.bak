<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header
    creationtool="OmegaT"
    creationtoolversion="2.0.5_4"
    segtype="sentence"
    o-tmf="OmegaT TMX"
    adminlang="EN-US"
    srclang="EN-US"
    datatype="plaintext"
  >
  </header>
  <body>
    <tu>
      <tuv lang="EN-US">
        <seg>Testing in Plone</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Pruebas en Plone</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This tutorial will explain how to write safer, better code that makes you look more professional.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>En este tutorial se explica cómo escribir código mejor y más seguro para darle un aspecto más profesional.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That's right - it's time to write tests, for everything you do.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Así es, es hora de escribir pruebas, para todo lo que haga.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't worry, it's not boring or complicated, you just need to learn how.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>No se preocupe, no es aburrido ni complicado, sólo tiene que aprender cómo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Introduction</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Introducción</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What is this thing called testing anyway?</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>¿Qué eso llamado pruebas?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;I know I should write tests, but ...</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;Yo se que tengo que escribir pruebas. pero...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>... they take time to write</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>...estas toman tiempo en escribirse</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>I’m a good developer</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>soy un buen desarrollador</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>... my customer / the community does the testing&quot;</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>... mi cliente/la comunidad hace las pruebas &quot;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sound familiar?</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>¿Le suena familiar?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No matter how good you think you are, you will make mistakes.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>No importa lo bueno que usted cree que es, siempre cometerá errores.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your code will contain bugs and someone will come after you demanding an explanation.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Su código tendrá errores y alguien va a venir después a exigirle una explicación.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without some methodical way of testing, you are guaranteeing your code with nothing more than guesswork and arrogance.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Sin alguna forma metódica de pruebas, usted estará garantizando su código con nada más que conjeturas y arrogancia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Clicking around the Plone interface for a few minutes before you ship your code off to the customer or user is simply not enough.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Pasear un poco por la interfaz de Plone durante algunos minutos antes de enviar el código al cliente o usuario simplemente no es suficiente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Testing is an art, it needs to be built into your development cycle from the very beginning - it is not something you do only after all the other work is finished, it is something you do continuously.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Hacer pruebas es un arte, tiene que estar integrado en su ciclo de desarrollo desde el principio. No es algo que se hace sólo después de que haya hecho todo el trabajo, es algo que tiene que hacer de forma continua.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unfortunately, testing often evokes emotions of dread in developers.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Desgraciadamente hacer pruebas a menudo evoca emociones de temor en los desarrolladores.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's slow, it's boring, it's not what they signed up to do.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Es lento, es aburrido, no es lo que acordaron hacer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But the art of testing has evolved beyond that - there is considerable elegance and fun to be found in well-conceived test strategies.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Pero el arte de hacer pruebas ha evolucionado más allá de eso. Existe una considerable elegancia y diversión en el ambiente de buenas estrategias planteadas para hacer pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This tutorial aims to give you the tools you need to write tests and testable software in Plone.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Este tutorial apunta a darle las herramientas necesarias para escribir pruebas y software comprobable en Plone.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are writing software for Plone core itself, don't even think about commiting any bug fix or feature without test coverage.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Si está escribiendo software para el núcleo (core) de Plone como tal, ni siquiera piense en cometer cualquier corrección de error o característica sin cobertura de pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are writing an add-on product or doing a customisation, holding yourself to the same high standards that the Plone core team do will give you better confidence in your software and will likely save you considerable pain down the road.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Si usted está escribiendo un producto complementario o alguna personalización; manteniendo los mismos altos estándares que el equipo core de Plone le dará una mejor confianza en su software y probablemente le ahorrará dolor considerable a lo largo del camino.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Examples</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Ejemplos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This tutorial contains several examples of the various types of tests.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Este tutorial contiene varios ejemplos de los distintos tipos de pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are available in the &lt;a0&gt;example.tests&lt;/a0&gt; package, which you can install as a develop egg in a Plone 3 buildout.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Estas están disponibles en el paquete &lt;a0&gt;example.tests&lt;/a0&gt;, el cual puede instalar como un huevo de desarrollo en su buildout de Plone 3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The examples of running tests use the standard commands for buildouts, since this is the only way that works reliably on Windows (that is, plain &lt;s1&gt;zopectl test&lt;/s1&gt; will not work on Windows).</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Los ejemplos de pruebas de funcionamiento utilizan los comandos estándar para buildouts, ya que esta es la única forma que funcione de forma fiable en Windows (es decir &lt;s1&gt;zopectl test&lt;/s1&gt; no funcionará en Windows).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Managing projects with zc.buildout</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Administrando proyectos con zc.buildout</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Take a look at the &lt;a0&gt;buildout tutorial&lt;/a0&gt; for more information.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Revise el &lt;a0&gt;tutorial de buildoutl&lt;/a0&gt; para más información.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A brief example</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Un breve ejemplo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just so that you know what we're talking about</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Sólo para que obtenga una idea de lo que estamos hablando.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try to find the bug in the following piece of code:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Trate de encontrar el error en el siguiente fragmente de código:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Found it yet?</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>¿Ya lo encontró?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Did you have to spend more than a few seconds thinking about it?</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>¿tuvo que pasar más de unos segundos pensando en el error? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any developer could have written that code and not seen the problem.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Cualquier desarrollador podría haber escrito ese código y no haber visto el problema.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Furthermore, the bug is an edge case that you may not have tested using manual/through-the-web testing.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Además, el error es un caso extremo que pudo no haber probado al hacer pruebas manual/a-través-de-la-Web.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let us write a test (actually, a doc/unit test) for this code.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Escribamos una prueba (realmente una prueba doc/unit) para este código:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't worry too much about how this is set up and executed just yet.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>No se preocupe demasiado acerca de cómo esto está configurado y ejecutado por el momento.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As it happens, the last test would fail.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Durante el proceso, la última prueba fallará.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It would print &lt;s0&gt;You are not an employee currently.&lt;/s0&gt;, unless we fixed the code:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Mostrará &lt;s0&gt;You are not an employee currently. (Actualmente usted no es un empleado)&lt;/s0&gt;, a menos que arreglemos el código:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The moral of the story?</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>¿Cuál es la moraleja de la historia?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>you rarely catch problems like these with manual testing</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>raramente se da cuenta de errores como este haciendo pruebas manualmente</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>put the time you waste catching silly bugs and typos into writing tests</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>pase el tiempo, que gasta en capturar errores tontos y errores de escritura, mejor escribiendo pruebas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>with decent test coverage, you end up saving lots of time when you refactor</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>con una decente cobertura de pruebas, usted termina ahorrándose grandes cantidades de tiempo cuando refactoriza</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types of tests</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Tipos de pruebas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some terminology you should be familiar with</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Un poco de terminología con la cual debería estar familiarizado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Broadly speaking, there are four main types of tests:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>En términos generales, hay cuatro tipos principales de pruebas:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unit tests</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Pruebas unitarias</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are written from the programmer's perspective.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Estas son escritas desde la perspectiva del programador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A unit test should test a single method or function in isolation, to ensure that it behaves correctly.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Una prueba unitaria debe probar un sólo método o función en aislamiento, para asegurar que funciona correctamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, testing that a given calculation is performed correctly given a variety of input is a good unit test for that one method.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Por ejemplo, probar que un cálculo determinado se realiza correctamente dado una variedad de entrada es una buena prueba unitaria para ese método.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integration tests</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Pruebas de integración</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whereas unit tests try to remove or abstract away as many dependencies as possible to ensure that they are truly only concerned with the method under test, integration tests exercise the integration points between a method or component and the other components it relies on.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Mientras que las pruebas unitarias tratan de eliminar o abstraer tantas dependencias como sea posible para asegurarse de que realmente sólo se preocupen por el método a probar, las pruebas de integración ejercitan los puntos de integración entre un método o componente y los demás componentes en los que este se basa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, testing that a method performs some calculation and then correctly stores the result in the ZODB is an integration test in that it tests the integration between that component and the ZODB.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Por ejemplo, probar que un método realiza un cálculo y luego almacena correctamente el resultado en la ZODB (Base de datos de objetos Zope) es una prueba de integración, ya que prueba la integración entre el componente y la ZODB.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Functional tests</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Pruebas funcionales</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A functional test is typically demonstrating a use case, exercising a &quot;vertical&quot; of functionality.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Una prueba funcional suele demostrar un caso de uso, realizando una &quot;vertical&quot; de la funcionalidad.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, testing that filling in a form and clicking &quot;Save&quot; then makes the resulting object available for future use, is a functional test for the use case of using that form to create content objects.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Por ejemplo, probar que luego del llenado de un formulario y hacer clic en &quot;Guardar&quot; haga que el objeto resultante esté disponible para su uso futuro, es una prueba funcional para el caso de uso de la utilización de ese formulario para crear objetos de contenido.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>System tests</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Pruebas de sistema</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are written from the user's perspective, and treat the system as a black box.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Estas son escritas desde la perspectiva del usuario, y tratan el sistema como una caja negra.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A system test may be simulating a user interacting with the system according to expected usage patterns.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Una prueba de sistema puede probar el caso de un usuario interactuando con el sistema de acuerdo con los patrones de uso esperados. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By their nature, they are typically less systematic than the other types of tests.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Por su naturaleza, generalmente son menos sistemáticas que los otros tipos de pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Furthermore, functional tests may be &lt;s0&gt;white box&lt;/s0&gt;, in which case they can make assertions about things like the underlying data storage (but only if this is specified clearly; implementation details should never affect functional tests).</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Adicionalmente, las pruebas funcionales pueden ser &lt;s0&gt;caja blanca&lt;/s0&gt;, en cuyo caso pueden hacer afirmaciones sobre cosas como el almacenamiento de datos subyacentes (pero sólo si se especifica claramente; los detalles de implementación no deben afectar a las pruebas de funcionales).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Such tests are also called &lt;s1&gt;functional integration tests&lt;/s1&gt; (you can see where the lines start to blur, but don't worry too much about the naming).</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Estas pruebas también se denominan &lt;s1&gt;pruebas de integración funcional&lt;/s1&gt; (puede ver que los limites comienzan a borrarse, pero no se preocupe demasiado por los nombres).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, functional tests can be &lt;s2&gt;black box&lt;/s2&gt; in which case they only perceive the system from the point of view of an actor (usually the end user) and make assertions only on what is presented in the (user) interface to that actor.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Alternativamente, las pruebas funcionales pueden ser &lt;s2&gt;caja negra&lt;/s2&gt;, en cuyo caso solo perciben el sistema desde el punto de vista de un actor (usualmente el usuario final) y hace afirmaciones basadas sólo en lo que es presentado en la interfaz de usuario para ese actor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Such tests, also known as &lt;s3&gt;acceptance tests&lt;/s3&gt; would not make assumptions about the underlying architecture at all.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Estas pruebas denominadas también &lt;s3&gt;pruebas de aceptación&lt;/s3&gt; no harán suposiciones sobre la arquitectura subyacente en absoluto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tests and documentation</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Pruebas y documentación</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a post to the Zope 3 mailing list, Jim Fulton explains the importance of tests and documentation, and how they go hand-in-hand:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>En un mensaje a la lista de correos Zope 3, Jim Fulton explica la importancia de las pruebas y documentación, y la forma en que van mano a mano:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One of the important things about this is that most doctests&lt;br0&gt;</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Una cosa importante acerca de esto es que la mayoría de doctests&lt;br0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>   should be written as documentation.  When you write new software&lt;br1&gt;</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>   debería escribirse como documentación. Cuando escribe nuevos componentes&lt;br1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>   components and you need to write tests for the main functionality&lt;br2&gt;</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>   de software y necesita escribir pruebas para funcionalidad principal&lt;br2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>   of your software you need to:&lt;br3&gt;</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>   de su software usted necesita:&lt;br3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>   - Get your head into the mode of writing documentation.&lt;br5&gt;</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>   - Ponga su mente en modo para escribir documentación&lt;br5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>     This is very very very important.&lt;br6&gt;</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>     Esto es extremadamente importante.&lt;br6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>   - You need to document how to use the software.  Include examples,&lt;br8&gt;</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>   - Usted necesita documentar cómo usar el software.   Incluir ejemplos,&lt;br8&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will learn more about doctests, and how they are used for unit testing and functional testing later.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Más tarde aprenderemos más sobre doctests y como se usan para pruebas unitarias y funcionamiento.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The important thing to note is that good tests often serve as documentation describing how your component is supposed to be used.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Lo importante a destacar es que las buenas pruebas a menudo sirven como documentación describiendo cómo su componente se supone es utilizado. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thinking about the story they tell is just as important as thinking about the number of input and output states they cover.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Pensar en la historia que cuentan es tan importante como pensar en el número de estados de entrada y salida que cubren.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Telling stories with doctests</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Contando historias con doctests</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Doctests bring code and test closer together, and makes it easier to describe what a test does, and why.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Los Doctests ponen el código y prueba junto, y hace más fácil describir que hace una prueba, y por qué.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By their nature, tests should exercise an API and demonstrate how it is used.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Por su naturaleza, la pruebas deberían ejercitar un API (Interfaz de programación de aplicaciones) y demostrar cómo se usa.  </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, for other developers trying to understand how a module or library should be used, tests can be the best form of documentation.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Por lo tanto, para otros desarrolladores tratando de entender cómo un módulo o biblioteca debería ser utilizado, las pruebas pueden ser la mejor forma de documentación.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Python supports the notion of &lt;s0&gt;doctests&lt;/s0&gt;, otherwise known as &lt;s1&gt;executable documentation&lt;/s1&gt;.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Python soporta la noción de &lt;s0&gt;doctests&lt;/s0&gt;, también conocida como &lt;s1&gt;documentación ejecutable&lt;/s1&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Doctests look like Python interpreter sessions.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Los Doctests se asemejan a sesiones de Python interpreter.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They contain plain text (normally in reStructedText, which can be rendered to HTML or PDF easily) as well as &lt;s0&gt;examples&lt;/s0&gt;.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Ellos contienen texto plano (normalmente en reStructedText, el cual puede ser renderizado a HTML o PDF fácilmente) así como &lt;s0&gt;ejemplos&lt;/s0&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The idea is to show something that could have been typed in an interpreter session and what the expected outcome should be.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>La idea es mostrar algo que podría haber sido escrito en una sesión interpreter (de intérprete) y lo que el resultado esperado debería ser.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the Zope 3 world, doctests are extremely prevalent and are used for most unit and integration testing.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>En el mundo de Zope 3, los doctests son muy frecuentes y se utilizan para la mayoría de pruebas unitarias e de integración.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Doctests come in two main flavours: You can write a simple text file, such as a &lt;s0&gt;README.txt&lt;/s0&gt;, that explains your code along with verifiable examples, or you can add doctests for a given method or class into the docstring of that method or class.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Los doctests vienen principalmente en dos sabores: puede escribir un simple archivo como &lt;s0&gt;README.txt&lt;/s0&gt;, explicando su código junto a ejemplos verificables, o puede agregar doctests para un método o clase determinado dentro de la docstring (cadena de documentación) de ese método o clase.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The full-file approach - sometimes known as &lt;s0&gt;documentation-driven development&lt;/s0&gt; - is the most common.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>El enfoque de archivo-completo, también conocido como &lt;s0&gt;desarrollo dirigido por documentación (documentation-driven development)&lt;/s0&gt; es el más común.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This type of test is very well suited for explaining how an API should be used and ensuring that it works as expected at the same time.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Este tipo de prueba es muy apropiado para explicar cómo una API se debe utilizar y al mismo tiempo asegurar que funciona como se espera.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, note that these are not technically proper unit tests, because there is no guarantee of isolation between the steps of the &quot;script&quot; that the doctest describes.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Sin embargo, note que estas técnicamente no son pruebas unitarias como tal, porque no hay ninguna garantía de aislamiento entre los steps del &quot;script&quot; que doctest describa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The docstring version uses the same basic syntax, but each docstring is executed as its own test fixture, guaranteeing full isolation between tests.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>La versión de cadena de documentación utiliza la misma sintaxis básica, pero cada una se ejecuta como su propia prueba fixture, garantizando el aislamiento total entre las pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is a trivial example of a doctest.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Aquí hay un ejemplo trivial de un doctest.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will learn how to set up such a test shortly.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Aprenderemos cómo configurar tal prueba en breve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interfaces are defined using Python class statements::</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Las interfaces se definen mediante sentencias de clases Python::</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...        &quot;&quot;&quot;bar blah blah&quot;&quot;&quot; 

In the example above, we've created an interface::</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>...        &quot;&quot;&quot;bar blah blah&quot;&quot;&quot; 

En el ejemplo anterior, hemos creado una interfaz::</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;class 'zope.interface.interface.InterfaceClass'&gt; 

We can ask for the interface's documentation::</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&lt;class 'zope.interface.interface.InterfaceClass'&gt; 

Podemos pedir la documentación de la interfaz::</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>'Foo blah blah'

We could create an arbitrary object - this will of course not provide 
the interface.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>'Foo blah blah'

Se podría crear un objeto arbitrario; por supuesto esto no proporcionará la interfaz.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each time the doctest runner encounters a line starting with &lt;s0&gt;&gt;&gt;&gt;&lt;/s0&gt;, the prompt of the Python interpreter (i.e. what you get by running &lt;s1&gt;python&lt;/s1&gt; without any arguments in a terminal), it will execute that line of code.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Cada vez que el runner de doctest se ejecuta y encuentra un línea que comienza con &lt;s0&gt;&gt;&gt;&gt;&lt;/s0&gt;, el indicador (línea de comandos) del Python interpreter (esto es, lo que obtiene al ejecutar &lt;s1&gt;python&lt;/s1&gt; sin argumentos en una terminal), ejecutará entonces esa línea de código.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If that statement is then immediately followed by a line with the same level of indentation as the &lt;s2&gt;&gt;&gt;&gt;&lt;/s2&gt; that is not a blank line and does not start with &lt;s3&gt;&gt;&gt;&gt;,&lt;/s3&gt; this is taken to be the expected output of the statement.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Si esa sentencia es inmediatamente seguida por una línea con el mismo nivel de sangría que &lt;s2&gt;&gt;&gt;&gt;&lt;/s2&gt; que no es una línea en blanco y no comienza con &lt;s3&gt;&gt;&gt;&gt;,&lt;/s3&gt; esto se toma como el resultado esperado de la sentencia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The test runner will compare the output it got by executing the Python statement with the output specified in the doctest, and flag up an error if they don't match.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>El runner de prueba comparará la salida que obtuvo mediante la ejecución de la sentencia de Python con la salida especificada en el doctest, e identificará un error si no coinciden.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;e0&gt;not&lt;/e0&gt; writing an output value is equivalent to stating that the method has no output.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Note que &lt;e0&gt;no&lt;/e0&gt; escribir un valor de salida es equivalente a afirmar que el método no posee salida.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, this is a failure:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Por lo tanto, se trata de una falla:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reference to &lt;s0&gt;foo&lt;/s0&gt; on its own will print the value of foo.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>La referencia a &lt;s0&gt;foo&lt;/s0&gt; por sí misma imprimirá el valor de foo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The correct DocTest would read:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>El doctest correcto sería el siguiente:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice also the ... (ellipsis) element in the expected otuput.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Note también el elemento ... (puntos suspensivos) en la salida esperada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These mean &quot;any number of characters&quot; (anologus to a &lt;s0&gt;.*&lt;/s0&gt; statement in a regular expression, if you are familiar with those).</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Estos significan &quot;cualquier número de caracteres&quot; (análogo a una sentencia &lt;s0&gt;.*&lt;/s0&gt; en una expresión regular, si usted está familiarizado con ellas).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are usually convenient shorthand, but they can sometimes be necessary.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Usualmente es taquigrafía convenida, pero en ocasiones es necesaria. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Por ejemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, the &lt;s0&gt;...&lt;/s0&gt; in the expected output replaces a hexadecimal memory address (&lt;s1&gt;0x0x4523a0&lt;/s1&gt; on the author's computer at the time of writing), which cannot be predicted in advance.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Aquí los &lt;s0&gt;...&lt;/s0&gt; en la salida esperada remplaza una dirección de memoria hexadecimal (&lt;s1&gt;0x0x4523a0&lt;/s1&gt; en la computadora del autor al momento de escribir), lo cual no se puede predecir de antemano.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When writing doctests in particular (but also when writing regular unit tests), you need to be careful about values you cannot predict, such as auto-generated ids based on the current time or a random number.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Cuando se escriben doctests en particular (pero también cuando se escriben pruebas unitarias regulares), usted necesita tener cuidado con los valores no puede predecir, como las identificaciones auto-generadas basadas en la hora actual o un número al azar.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ellipsis operator can help you work around those.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>El operador ellipsis (de puntos suspensivos) le puede ayudar a trabajar con esos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do not confuse the ellipsis operator in the expected output with the syntax of using &lt;s0&gt;...&lt;/s0&gt; underneath a &lt;s1&gt;&gt;&gt;&gt;&lt;/s1&gt; line.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>No confunda el operador ellipsis en la salida esperada con la sintaxis de usar &lt;s0&gt;...&lt;/s0&gt; debajo de una línea &lt;s1&gt;&gt;&gt;&gt;&lt;/s1&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the standard Python interpreter syntax used to designate statments that run over multiple lines, normally as the result of indentation.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esta es la sintaxis estándar de Python interpreter usada para designar sentencias que se ejecuten sobre líneas múltiples, normalmente como el resultado de sangría. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can, for example, write:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Usted puede por ejemplo escribir:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if that is necessary in your test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>si es necesario en su prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Doctest tips and tricks</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Consejos y trucos para doctest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As with all testing, you will get better at doctests over time.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Así como lo es para el tema de pruebas, igualmente mejorará en el asunto de doctests con la practica.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Below are a few tips that may help you get started.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>A continuación se presentan algunos consejos que pueden ayudarle a empezar.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read the documentation</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Lea la documentación</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>doctests have been in Python for a long time.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>los doctests han estado en Python desde hace mucho tiempo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;a0&gt;doctest module&lt;/a0&gt; comes with more documentation on how they work.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>El &lt;a0&gt;modulo de doctest&lt;/a0&gt; viene con más documentación sobre cómo funcionan.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A test is just a bunch of python statements!</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>¡una prueba es sólo un montón de sentencias Python!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Never forget this.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Nunca olvide eso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can, for example, reference helper methods in your own product, for example, imagine you have a method in &lt;s0&gt;Products.MyProduct.tests.utils&lt;/s0&gt; that has a method &lt;s1&gt;setUpSite()&lt;/s1&gt; to pre-populate your site with a few directories and users.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Usted puede, por ejemplo, hacer referencia a métodos de ayuda (helper methods) en su propio producto, por ejemplo imagine que usted tiene un método en &lt;s0&gt;Products.MyProduct.tests.utils&lt;/s0&gt; que a su vez tiene un método &lt;s1&gt;setUpSite()&lt;/s1&gt; para llenar previamente su sitio con unos cuantos directorios y usuarios.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Your doctest could contain:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Su doctest podría contener:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The test suite can perform additional initialisation</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>El conjunto de pruebas puede llevar a cabo inicialización adicional</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A test suite can have &lt;s0&gt;setUp()&lt;/s0&gt; and/or &lt;s1&gt;tearDown()&lt;/s1&gt; handlers that perform additional set-up or clean-up.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Un conjunto de pruebas puede tener controladores &lt;s0&gt;setUp()&lt;/s0&gt; y/o &lt;s1&gt;tearDown()&lt;/s1&gt; que realicen acciones adicionales de configuración o limpieza. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will see further examples of this later.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Veremos ejemplos de esto más adelante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>PDB is still your friend</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>PDB sigue siendo su amigo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can put the standard &lt;s0&gt;import pdb; pdb.set_trace()&lt;/s0&gt; on a line in doctest.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Usted puede colocar &lt;s0&gt;import pdb; pdb.set_trace()&lt;/s0&gt; en una línea en doctest.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unfortunately, you can't step through a doctest line by line, but you can print variables and examine the state of the test fixture.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Lamentablemente, no se puede ir línea por línea a través de un doctest, pero puede imprimir variables y examinar el estado de la prueba fixture.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can catch exceptions</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Usted puede capturar las excepciones</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to debug a doctest that is throwing an exception, this statement is often useful:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Si necesita depurar un doctest que está arrojando una excepción, esta sentencia es a menudo útil:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running tests</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Ejecutando pruebas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is not much good writing a test or relying on someone else's tests if you don't know how to run them.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>No sirve de mucho escribir una prueba o confiar en las pruebas de otra persona si no sabe cómo ejecutarlas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The easiest way to run tests in Zope is to use &lt;s0&gt;zopectl&lt;/s0&gt; or the equivalent control script.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>La forma más fácil de ejecutar pruebas en Zope es el uso de &lt;s0&gt;zopectl&lt;/s0&gt; o el script de control equivalente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This would run all tests in the &lt;s0&gt;Products.RichDocument&lt;/s0&gt; module.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Este ejecutará todas las pruebas en el módulo &lt;s0&gt;Products.RichDocument&lt;/s0&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are using a &lt;a1&gt;buildout&lt;/a1&gt; with an instance control script called &lt;s2&gt;instance&lt;/s2&gt;, this would be:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Si usted está usando &lt;a1&gt;buildout&lt;/a1&gt; con un script de control de instancia llamado &lt;s2&gt;instance&lt;/s2&gt;, esto sería:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using buildout is probably a good idea - see &lt;a0&gt;the buildout tutorial&lt;/a0&gt; - not at least because this is the only way that works reliably on Windows.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Usar buildout es probablemente una buena idea (vea &lt;a0&gt;el tutorial de buildout&lt;/a0&gt;) para empezar porque es la única forma que funcione de forma fiable en Windows.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will use this syntax from now on.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Usaremos esta sintaxis de ahora en adelante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To execute a single test or a set of tests matched by regular expression, you can use:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Para ejecutar una sola prueba o un conjunto de pruebas acompañada de expresiones regulares, puede utilizar:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This would run tests in files like &lt;s0&gt;test_setup.py&lt;/s0&gt;.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esto puede ejecutar pruebas en archivos como &lt;s0&gt;test_setup.py&lt;/s0&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To run all doctests in &lt;s1&gt;README.txt&lt;/s1&gt; (presuming there was a test suite for this file) you would write:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Para ejecutar todos los doctests en &lt;s1&gt;README.txt&lt;/s1&gt; (asumiendo que hay un conjunto de pruebas para este archivo) tendría que escribir:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new test runner also includes a few debugging options.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>El nuevo runner de pruebas también incluye algunas opciones para depuración.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will stop execution at the first failing test and drop into a PDB post-mortem.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esto detendrá la ejecución en la primera prueba fallida y lo situará dentro de un PDB post-mortem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see the other options that are available, run:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Para ver las otras opciones que están disponibles, ejecute:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the tests you think are relevant all pass, it's time to run all tests and make sure nothing else broke.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Cuando las pruebas que considere relevante pasaron, es el momento de ejecutar todas las pruebas y asegurarse de que nada más esté dañado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(No, we don't care that you are writing your code in a totally different python module than what those other tests are supposed to test, and that they were all fine and good and all you changed was a docstring.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>(No, no nos importa si usted está escribiendo su código en un módulo de Python totalmente distinto que el aquel de esas otras pruebas se supone que prueben, y que todas estaban bien, y lo único que cambió fue una docstring (cadena de documentación).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Run the tests when you think you're done.)</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Ejecute la prueba cuando piense que este listo).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When tests finish running, you will see a report like:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Cuando las pruebas terminen de ejecutarse, usted verá un reporte como este:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(it may look slightly different, depending on which test runner you are using)</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>(puede lucir un poco diferente, dependiendo de cual runner de prueba esté usted utilizando)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rehearse a satisfied sigh as you read the line &quot;OK&quot;, as opposed to seeing a count of failed tests.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Practique un suspiro de satisfacción para cuando lea la línea &quot;OK&quot;, en lugar de ver un recuento de pruebas fallidas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With time, this will be the little notifier that lets you go to bed, see your friends again or generally get back to real life with an &lt;s0&gt;svn commit&lt;/s0&gt;.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Con el tiempo, este será el pequeño notificador que le permite ir a la cama, ver a sus amigos una vez más o en general volver a la vida real con un &lt;s0&gt;svn commit&lt;/s0&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're not so lucky, you may see:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Si no tiene tanta suerte, puede que vea:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(again, the output may look slightly different depending on your test runner, but the same information should always be there)</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>(de igual manera la salida puede ser algo diferente dependiendo del runner de prueba, pero la información será esencialmente la misma)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that there were 1 python error and 1 failed test during test execution.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esto significa que hubo 1 error y 1 prueba fallida durante la ejecución de la prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A python error means that some of your test code, or some code that was called by a test, raised an exception.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Un error de Python significa que algo de su prueba de código, o un código que fue llamado por una prueba, arrojó una excepción.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is bad, and you should fix it right away.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esto no es algo bueno, y debería arreglarlo inmediatamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A failed test means that your test was trying to assert something that turned out not to be true.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Una prueba fallida significa que su prueba estaba tratando de afirmar algo que resultó no ser verdadero.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This could be OK.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esto podría estar bien.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It could mean you haven't written the code the test is testing yet (well done, you wrote the test first!), or that you don't yet know why it's failing.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Podría significar que no ha escrito el código que la prueba está probando (bien hecho, ¡escribió la prueba primero!), o que no sabe todavía por qué está fallando.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes you may be radically refactoring or rewriting parts of your code, and the tests will keep on failing until you're done.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>A veces puede que esté radicalmente refactorizando o reescribiendo partes de su código, y las pruebas seguirán fallando hasta que haya terminado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Incidentally, this is part of the reason why unit tests are so good - you can do that kind of stuff.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Por cierto, esto es parte de la razón por la cual las pruebas unitarias son tan buenos; usted puede hacer ese tipo de cosas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's sometimes (not always - don't try this on Plone core unless you've been told it's OK by the release manager) acceptable to go to bed and check in a failing test if you are not in a position to know how to fix it.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>A veces es (no siempre, no intente hacer esto en el core de Plone a menos que se le haya dicho que está bien por el administrador) aceptable ir a la cama y reportar una prueba fallida si no está en la posición de saber cómo solucionarla.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At least other developers will be aware of the problem and may be able to fix it.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Al menos otros desarrolladores estarán al tanto del problema y podrían estar en la capacidad de solucionarlo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing unit tests</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Escribiendo una prueba unitaria</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that you understand the principle of tests and how to run them, it's time to write some.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Ahora que usted entiende el principio de las pruebas y la forma de ejecutarlas, es momento de escribir algunas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will start with simple unit tests using doctest syntax.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Empezaremos con simples pruebas unitarias usando sintaxis de doctest.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will start by showing how to create a simple unit test with doctest syntax.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Vamos a empezar por cómo crear una simple prueba unitaria con una sintaxis doctest.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is nothing Zope- or Plone-specific about this test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>No hay nada específico de Zope o Plone relacionado a esta prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This type of test is ideal for methods and classes that perform some kind of well-defined operation on primitives or simple objects.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Este tipo de prueba es ideal para métodos y clases que realizan algún tipo de operación bien definida en primitivas o objetos simples.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The doctest syntax is well-suited for explaining the inputs and outputs.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>La sintaxis doctest es muy adecuada para explicar las entradas y salidas. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since the tests are relatively few and/or descriptive, keeping the tests, documentation and code close together makes sense.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Ya que las pruebas son relativamente pocas y/o descriptivas, mantener las documentación, pruebas y código juntos tiene sentido.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tests are usually found in a &lt;s0&gt;tests/&lt;/s0&gt; sub-package.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Las pruebas generalmente se encuentran en un sub-paquete &lt;s0&gt;tests/&lt;/s0&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the &lt;s1&gt;example.tests&lt;/s1&gt; package, we have created a file called &lt;s2&gt;tests/test_simple_doctest.py&lt;/s2&gt;.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>En el paquete &lt;s1&gt;example.tests&lt;/s1&gt;, hemos creado un archivo llamado &lt;s2&gt;tests/test_simple_doctest.py&lt;/s2&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This sets up a test suite to run doctests in the doc strings in the module &lt;s3&gt;example.tests.context&lt;/s3&gt;.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esto establece un conjunto de pruebas para ejecutar doctests en las cadenas de documentación en el módulo &lt;s3&gt;example.tests.context&lt;/s3&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's look at the test setup first:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Primero echemos un vistazo a la configuración de la prueba:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;This is the setup for a doctest where the actual test examples are held in 
docstrings in a module.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;Esta es la configuración de un doctest donde los ejemplos de pruebas se mantienen en docstrings en un módulo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, we are not using anything Zope-specific at all.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>En este caso, no estamos usando nada Zope-específico en absoluto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We could of course 
use the Zope 3 Component Architecture in the setup if we wanted.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Por supuesto que podríamos utilizar la arquitectura de componentes de Zope 3 en la configuración si quisiéramos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For that,
take a look at test_zope3_doctest.py.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>para esto,
revise test_zope3_doctest.py.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, we *do* use the zope.testing package, which provides improved
version of Python's standard DocTestSuite, DocFileSuite and so on.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Sin embargo *si* usamos el paquete zope.testing, el cual proporciona un versión mejorada de DocTestSuite estándar de Python, DocFileSuite entre otros.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you
don't want this dependency, just use doctest.DocTestSuite.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Si usted
no quiere esta dependencia, simplemente use doctest.DocTestSuite.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;We can use this to set up anything that needs to be available for</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;Podemos usar esta opción para configurar todo lo que tiene que estar disponible para</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>each test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>cada prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is run before each test, i.e. for each docstring that</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Se ejecuta para cada prueba, es decir, para docstring que</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>contains doctests.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>contiene doctests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Look at the Python unittest and doctest module documentation to learn</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Revise la documentación de Python para pruebas unitarias y módulos doctest para aprender</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>more about how to prepare state and pass it into various tests.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>más sobre cómo preparar el estado y pasarlo en varias pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;This is the companion to setUp - it can be used to clean up the</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;Este es el compañero del setUP; se puede utilizar para limpiar el</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>test environment after each test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>entorno de prueba después de cada prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Here, we tell the test runner to execute the tests in the given</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># Aquí. le decimos al runner de prueba que ejecute la prueba en tal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># module.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># módulo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The setUp and tearDown methods can be used to perform</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Los métodos setUP y tearDown pueden usarse para llevar a cabo </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># test-specific setup and tear-down.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># configuración de prueba-especifica y desmontaje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>setUp=setUp,          # setUp and tearDown are optional!</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>setUp=setUp,          # ¡setUp y tearDown son opcionales!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are a lot of comments here, and we show how to use &lt;s0&gt;setUp()&lt;/s0&gt; and &lt;s1&gt;tearDown()&lt;/s1&gt; methods for additional initialisation and clean-up, if necessary.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Hay un montón de comentarios aquí, y mostramos cómo usar los métodos &lt;s0&gt;setUp()&lt;/s0&gt; y &lt;s1&gt;tearDown()&lt;/s1&gt; inicialización adicional y limpieza, en caso de que sea necesario.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The test runner will call the &lt;s2&gt;test_suite()&lt;/s2&gt; method and expect a &lt;s3&gt;TestSuite&lt;/s3&gt; object back.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>El runner de prueba llamará el método &lt;s2&gt;test_suite()&lt;/s2&gt;y esperará un objeto &lt;s3&gt;TestSuite&lt;/s3&gt; como respuesta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If desired, we could have put multiple test suites referring to multiple modules into the &lt;s4&gt;TestSuite&lt;/s4&gt; that is being returned.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Si se desea, podríamos haber puesto varios conjuntos de pruebas que se refieran a múltiples módulos dentro del &lt;s4&gt;TestSuite&lt;/s4&gt; que está respondiendo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is the actual code under test, in &lt;s0&gt;context.py&lt;/s0&gt;:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Aquí está el código tras la prueba, en &lt;s0&gt;context.py&lt;/s0&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;An object used for testing.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;Un objeto usado para hacer pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will register an adapter from this</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Vamos a registrar un adaptador de esta</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>interface to IUpperCaser in the test setup.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>interfaz para IUpperCaser en la configuración de la prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's how you use it.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Aquí está cómo usarla.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, import the class.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Primero, importe la clase</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&gt;&gt;&gt; from example.tests.context import Context</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&gt;&gt;&gt; de Contexto de importación example.tests.context</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then in-stan-ti-ate it (with me so far?):</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Luego haga una instanciación (¿sigue conmigo?):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Okay, here's the tricky bit ... now we need to set the title:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Bueno, aquí está el truco...ahora tenemos que definir el título:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&gt;&gt;&gt; my_context.title = u&quot;Some string!&quot;</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&gt;&gt;&gt; my_context.title = u&quot;¡alguna cadena!&quot;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Phew ... did that work?</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>uf...¿funcionó eso?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>u'Some string!'</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>u'¡alguna cadena!'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Yeah!</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>¡Así es!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is how we may run the tests from a buildout:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Así es como puede ejecutar las pruebas desde un buildout:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Testing a Zope 3 component with a separate doctest file</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Probando un componente Zope 3 con un archivo separado doctest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes, we may need to perform additional set-up for our tests to run properly.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>A veces, puede ser necesario realizar configuración adicional para que nuestras pruebas se ejecuten correctamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the previous example, we wrote a doctest in a docstring.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>En el ejemplo previo, escribimos un doctest en un docstring.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As tests become more complex or require more involved configuration, it is usually better to separate the actual test into a text file.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Como las pruebas se hacen más complejos o que requieren una configuración más profunda. por lo general es mejor separar la prueba como tal en un archivo de texto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes, this can be the &lt;s0&gt;README.txt&lt;/s0&gt; file of a package.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Algunas veces, este puede ser el archivo &lt;s0&gt;README.txt&lt;/s0&gt; de un paquete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the approach favoured by Zope 3 components.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Este es el enfoque preferido por los componentes de Zope 3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this example, we will register an adapter that is used in a doctest.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>En este ejemplo, vamos a registrar un adaptador que se utiliza en un doctest.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This doctest also serves to illustrate how this particular adapter should be used.  This style of test is great when the emphasis is on the documentation as well as the test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Este doctest también sirve para ilustrar cómo este adaptador en particular debe ser utilizado. Este estilo de prueba es genial cuando se hace hincapié en la documentación así como en la prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that we do not load the package's ZCML in its entirely.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Tenga en cuenta que no cargamos el paquete ZCML en su totalidad.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, we register the required components explicitly.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>En su lugar, registramos los componentes necesarios de forma explícita.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that we retain control over what is executed in the test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esto significa que poseemos el control sobre lo que es ejecutado en la prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We use the &lt;s0&gt;zope.component.testing.tearDown&lt;/s0&gt; method to ensure that our test environment is properly cleaned up.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Nosotros usamos el método &lt;s0&gt;zope.component.testing.tearDown&lt;/s0&gt; para asegurarnos que nuestro entorno de prueba esta debidamente limpio.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the &lt;s0&gt;example.tests&lt;/s0&gt; package, we have the following test setup in &lt;s1&gt;tests/test_zope3_doctest.py&lt;/s1&gt;:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>En el paquete &lt;s0&gt;example.tests&lt;/s0&gt;, tenemos la siguiente configuración de prueba en &lt;s1&gt;tests/test_zope3_doctest.py&lt;/s1&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;This is the setup for a doctest that tests a Zope 3 component.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;Esta es la configuración para un doctest que prueba un componente de Zope 3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is really nothing too different from a &quot;plain Python&quot; test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Realmente no hay nada muy diferente a una prueba &quot;plain Python&quot;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We are not
parsing ZCML, for example.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Nosotros no estamos
analizando ZCML, por ejemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, we use some of the helpers from Zope 3
to ensure that the Component Architecture is properly set up and torn down.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Sin embargo, usamos algunos de los helpers de Zope 3
para asegurar que la Component Architecture (Arquitectura de Componente) este debidamente creada y desmontada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;This method is used to set up the test environment.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;Este método se utiliza para configurar el entorno de prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We pass it to the</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Lo pasamos al</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We also pass a tear-down, but in this case,</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>También pasamos un tear-down (desmontaje), pero en este caso,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>we use the tear-down from zope.component.testing, which takes care of</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>usamos un tear-down desde zope.component.testing, el cual se encarga de </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>cleaning up Component Architecture registrations.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>limpiar los registros de Component Architecture.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Register the adapter.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># Registre el adaptador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See zope.component.interfaces for more</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Vea zope.component.interfaces para más</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>from example.tests.context import UpperCaser</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>de example.tests.context import UpperCaser</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># archivo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The setUp and tearDown methods employed make use of the Zope 3</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Los métodos setUp y tearDown empleados hacen uso de Zope 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Component Architecture, but really there is nothing Zope-specific</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># Component Architecture, pero realmente no hay nada Zope-específico</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># about this.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># acerca de esto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to test &quot;plain-Python&quot; this way, the setup</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Si quiere probar &quot;plain-Python&quot; de esta manera, la configuración</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># is the same.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># es la misma.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice how we use a custom &lt;s0&gt;setUp()&lt;/s0&gt; method to register the custom adapter, and then reference &lt;s1&gt;zope.component.testing.tearDown&lt;/s1&gt; for the tear-down method.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Observe cómo se utiliza un método personalizado &lt;s0&gt;setUp()&lt;/s0&gt; para registrar el adaptador personalizado, y después hacer referencia a &lt;s1&gt;zope.component.testing.tearDown&lt;/s1&gt; para el método de desmontaje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This refers to the file &lt;s0&gt;zope3.txt&lt;/s0&gt;, which looks like this:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esto se refiere al archivo &lt;s0&gt;zope3.txt&lt;/s0&gt;, que luce como este:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>==========================
A Zope 3 component doctest
==========================

This is the type of test found most commonly in Zope 3.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>==========================
Un doctest de componente Zope 3
==========================

Este es el tipo de prueba que se encuentran más comúnmente en Zope 3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have a custom
setup method (in test_zope3_doctest.py) which registers the components we
need for the test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Tenemos un método de configuración personalizado (in test_zope3_doctest.py) el cual registra los componentes que necesitamos para la prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can then use those here.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>A continuación podemos utilizar esos aquí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ZCML is not processed directly,
nor do we have a full Zope 2/Plone environment available.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>El ZCML no es procesado directamente,
tampoco tenemos un entorno completo Zope 2/Plone disponible.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This makes the test
more isolated (and faster!).</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esto hace que la prueba esté
más asilada (¡y más rápida!).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Often, we may choose to use mock implementations
of certain components in order to make the test properly isolated.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>A menudo, se puede optar por utilizar las implementaciones simuladas de ciertos componentes a fin de hacer la prueba correctamente aislada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course, we should still tell a story with this documentation.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Por supuesto, igual deberíamos contar una historia con esta documentación.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's say we had one of our really exciting context objects:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Digamos que teníamos uno de nuestros objetos de contexto realmente emocionantes:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&gt;&gt;&gt; context.title = u&quot;Some puny title&quot;

Of course, that's nice, but what if we wanted to make a bit more of an impact?</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&gt;&gt;&gt; context.title = u&quot;cualquier título&quot;

Por supuesto eso está bien, pero y que si ¿quisiéramos hacer un poco más de un impacto?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can use our handy upper-caser adapter!</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Podemos utilizar nuestro útil adaptador upper-caser!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>u'SOME PUNY TITLE'</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>u'CUALQUIER TÍTULO'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Wow!</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>¡Vaya!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To run just this test, we may do:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Para ejecutar sólo esta prueba, podemos hacer:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running unit tests:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Ejecutando pruebas unitarias:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Ejecutando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing a PloneTestCase unit/integration test</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Escribiendo una prueba  PloneTestCase unit/integración</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes, we need access to a full-blown Plone instance in order to effectively write tests</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>A veces, tenemos que tener acceso a una instancia Plone en todas sus facetas con el fin de escribir efectivamente las pruebas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;PloneTestCase&lt;/s0&gt;, which in turn uses &lt;s1&gt;ZopeTestCase&lt;/s1&gt;, is used to set up a full Zope environment, including a Plone instance, for testing.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&lt;s0&gt;PloneTestCase&lt;/s0&gt;, que a su vez utiliza &lt;s1&gt;ZopeTestCase&lt;/s1&gt;, se utiliza para configurar un entorno de Zope completo, incluyendo una instancia de Plone, para hacer pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This type of test is very convenient and often necessary because content types, tools and other parts of Plone have hard dependencies on various underlying Zope, CMF and Plone components.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Este tipo de prueba es muy conveniente y a menudo necesario debido a los tipos de contenido, herramientas y otras partes de Plone tienen dependencias estrictas en distintos subyacentes Zope, CMF y componentes de Plone.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is generally better to write simpler tests, however, both because they provide better isolation (thus testing the component more directly and under better controlled circumstances) and because they execute faster.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>En general es mejor para escribir pruebas más sencillas, sin embargo, tanto debido a que proporcionan un mejor aislamiento (lo que prueba el componente más directamente y en mejores condiciones controladas) y se ejecutan más rápidamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>PloneTestCase-tests are often referred to as &quot;unit tests&quot;, but in truth they are &lt;e0&gt;integration&lt;/e0&gt; tests, since they depend on a &quot;live&quot; Zope instance and thus test the integration between your code and the underlying framework.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>PloneTestCase-tests regularmente se refieren a &quot;pruebas unitarias&quot;, pero en realidad son pruebas de &lt;e0&gt;integración&lt;/e0&gt;, ya que dependen de una instancia &quot;viva&quot; de Zope y así probar la integración entre su código y el framework subyacente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can use the PloneTestCase setup to run doctests, as we will see in the next section.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Podemos usar el setup de PloneTestCase para ejecutar doctests, como veremos en la próxima sección.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, however, we will demonstrate how to use &lt;s0&gt;unittest.TestCase&lt;/s0&gt; classes, where each test is a method on a class (with a name beginning with &lt;s1&gt;test&lt;/s1&gt;) This type of test is not as good for documentation, but can be very useful for systematically executing many variations on the same test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>No obstante aquí demostraremos cómo usar clases &lt;s0&gt;unittest.TestCase&lt;/s0&gt;, donde cada prueba es un método en una clase (con un nombre comenzando con &lt;s1&gt;test&lt;/s1&gt;) Este tipo de prueba no es muy buena documentación, pero puede ser muy útil para la ejecución sistemática de muchas variaciones en la misma prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some developers also find this type of test easier to debug, since it is plain Python code which can be stepped through using the debugger.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Algunos desarrolladores también encuentran este tipo de prueba más fácil de depurar, ya que es código normal de Python que se puede recorrer utilizando un depurador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the &lt;s0&gt;example.tests&lt;/s0&gt; package, we have &lt;s1&gt;tests/base.py&lt;/s1&gt;.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>En el paquete &lt;s0&gt;example.tests&lt;/s0&gt;, tenemos &lt;s1&gt;tests/base.py&lt;/s1&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This does not contain any tests, but performs the necessary configuration to set up the test fixture:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Este no contiene ninguna prueba, sino que realiza la configuración necesaria para definir la prueba fixture:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;Test setup for integration and functional tests.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;Configuración de pruebas funcionales y de integración</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When we import PloneTestCase and then call setupPloneSite(), all of Plone's
products are loaded, and a Plone site will be created.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>cuando importamos PloneTestCase y luego llamamos setupPloneSite(), todos los productos de Plone son cargados, y un sitio Plone será creado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This happens at module
level, which makes it faster to run each test, but slows down test runner
startup.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esto ocurre a nivel de módulo, 
lo que hace que sea más rápido para ejecutar cada prueba,
pero ralentiza el arranque del runner de prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;

from Products.Five import zcml
from Products.Five import fiveconfigure

from Testing import ZopeTestCase as ztc

from Products.PloneTestCase import PloneTestCase as ptc
from Products.PloneTestCase.layer import onsetup

#
# When ZopeTestCase configures Zope, it will *not* auto-load products in 
# Products/.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;

from Products.Five import zcml
from Products.Five import fiveconfigure

from Testing import ZopeTestCase as ztc

from Products.PloneTestCase import PloneTestCase as ptc
from Products.PloneTestCase.layer import onsetup

#
# Cuando ZopeTestCase configura Zope, este *no* auto-cargará productos en 
# Products/.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, we have to use a statement such as:
# 
#   ztc.installProduct('SimpleAttachment')
# 
# This does *not* apply to products in eggs and Python packages (i.e. not in
# the Products.*) namespace.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>En su lugar, tenemos que usar una sentencia como:
# 
#   ztc.installProduct('SimpleAttachment')
# 
# Esto *no* applica a productos en huevos ni al namespace (espacio de nombre) de paquetes Python (es decir, no en
# los Productss.*) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For that, see below.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>para esto, vea a continuación</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># 
# All of Plone's products are already set up by PloneTestCase.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># 
# Todos los productos de Plone están ya establecidos por PloneTestCase.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;Set up the package and its dependencies.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;Configure el paquete y sus dependencias.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The @onsetup decorator causes the execution of this body to be deferred</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>El decorador @onsetup provoca que la ejecución de este cuerpo sea aplazada</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>until the setup of the Plone site testing layer.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>hasta la configuración de la capa de pruebas del sitio Plone.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We could have created our</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Pudimos haber creado nuestra</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>own layer, but this is the easiest way for Plone integration tests.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>propia capa, pero esta es la manera más fácil para pruebas de integración Plone.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Load the ZCML configuration for the example.tests package.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># Ejecute la configuración ZCML para el paquete example.tests</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This can of course use &lt;include /&gt; to include other packages.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># Esto obviamente puede usar &lt;include /&gt; para incluir otros paquetes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># We need to tell the testing framework that these products</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># Hay que decirle al framework de pruebas de que estos productos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># should be available.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># deberían estar disponibles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can't happen until after we have loaded</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esto no puede ocurrir hasta después de haber cargado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># the ZCML.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># el ZCML.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, we do it here.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Por lo tanto, lo hacemos aquí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note the use of installPackage() instead</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>observe el uso de installPackage() en vez</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># of installProduct().</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># de installProduct().</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is *only* necessary for packages outside the Products.* namespace</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># Esto es necesario *sólo* para paquetes fuera del espacio de nombres de Productos .*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># which are also declared as Zope 2 products, using</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># los cuales también son declarados como productos Zope 2, usando</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># We may also need to load dependencies, e.g.:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># También puede ser necesario cargar dependencias, por ejemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The order here is important: We first call the (deferred) function which
# installs the products we need for this product.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># # El orden aquí es importante: En primer lugar llama la función (diferida) que
# instala los productos que necesita para este producto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then, we let PloneTestCase 
# set up this product on installation.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Luego dejamos PloneTestCase 
# configure este producto en la instalación.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;We use this base class for all the tests in this package.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;Usamos esta clase base para todas las pruebas en este paquete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If necessary,</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Si es necesario,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>we can put common utility or setup code in here.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>podemos poner utilidad común o el código del setup aquí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This applies to unit</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esto se aplica a casos de</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>test cases.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>prueba unitaria</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;We use this class for functional integration tests that use doctest</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;Usamos esta clase para pruebas de integración funcional que usen doctestç</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>syntax.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>sintaxis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Again, we can put basic common utility or setup code in here.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Una vez más podemos poner utilidad común o el código del setup aquí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice how we can explicitly install third party products (and egg-based packages which use product semantics) and then tell PloneTestCase to quick-install these into the test fixture site.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Observe cómo podemos instalar de forma explícita productos de terceros (y paquetes base-huevo que utilizan la semántica del producto) y luego decirle a PloneTestCase hacer una rápida instalación de estos en el sitio de prueba fixture.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The test runner will &lt;e0&gt;not&lt;/e0&gt; automatically load all products in the &lt;s1&gt;Products.*&lt;/s1&gt; namespace, nor will it execute ZCML for packages outside &lt;s2&gt;Products.*&lt;/s2&gt; automatically.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>El runner de prueba &lt;e0&gt;no&lt;/e0&gt; cargará automáticamente todos los productos en el namespace de &lt;s1&gt;Products.*&lt;/s1&gt;, y tampoco ejecutará el ZCML para paquetes fuera de &lt;s2&gt;Products.*&lt;/s2&gt; automáticamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The test class which uses this environment is found in &lt;s0&gt;tests/test_integration_unit.py&lt;/s0&gt;:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>La clase de prueba que usa el entorno se puede encontrar en &lt;s0&gt;tests/test_integration_unit.py&lt;/s0&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;This is an integration &quot;unit&quot; test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;Esta es una prueba &quot;unitaria&quot; de integración.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It uses PloneTestCase, but does not
use doctest syntax.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Usa PloneTestCase, pero no usa la sintaxis doctest.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You will find lots of examples of this type of test in CMFPlone/tests, for 
example.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Encontrará varios ejemplos de este tipo en CMFPlone/tests, por ejemplo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;The name of the class should be meaningful.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;El nombre de la clase debería significar algo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This may be a class that</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esto puede ser una clase que</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tests the installation of a particular product.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>pruebe la instalación de un producto en particular.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;This method is called before each single test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;Este método es llamado antes de cada prueba individual.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can be used to</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Puede ser utilizado para</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>set up common state.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>establecer el estado común.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Setup that is specific to a particular test</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Configuración que sea específica para una determinada prueba</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>should be done in that test method.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>debería hacerse con ese método.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;This method is called after each single test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;Este método es llamado después de cada prueba individual.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can be used for</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Puede ser utilizado para</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>cleanup, if you need it.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>limpieza, si usted lo necesita.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the test framework will roll back</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Tenga en cuenta que el framework deshará</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the Zope transaction at the end of each test, so tests are generally</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>la transacción Zope al final de cada prueba, así que las pruebas son en general</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>independent of one another.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>independiente de unas a otras.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, if you are modifying external</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Sin embargo, si usted está modificando recursos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>resources (say a database) or globals (such as registering a new</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>externos (digamos una base de datos) o globales (tal como registrar u nuevo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>adapter in the Component Architecture during a test), you may want to</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>adaptador en la Component Architecture durante una prueba), tal vez quiera</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tear things down here.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>usar un tear-down (desmontaje) aquí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is a simple test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># Esta es una prueba sencilla.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method needs to start with the name</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>El método tiene que empezar con el nombre</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Look at the Python unittest documentation to learn more about hte</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>#Revise la documentación de Python para pruebas unitarias para aprender más sobre los</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># kinds of assertion methods which are available.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># tipos de métodos de afirmaciones disponibles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># PloneTestCase has some methods and attributes to help with Plone.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># PloneTestCase tiene algunos métodos y atributos para ayudar con Plone.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Look at the PloneTestCase documentation, but briefly:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># Observe la documentación PloneTestCase, pero en pocas palabras:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#   - self.portal is the portal root</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>#   - self.portal es el root de portal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#   - self.folder is the current user's folder</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>#   - self.folder es la carpeta del usuario actual</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#   - self.logout() &quot;logs out&quot; so that the user is Anonymous</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>#   - self.logout() &quot;cierra sesión&quot; y el usuario entonces es Anónimo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#   - self.setRoles(['Manager', 'Member']) adjusts the roles of the current user</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>#   - self.setRoles(['Manager', 'Member']) ajusta los role del usuario actual</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Keep adding methods here, or break it into multiple classes or</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># Mantenga la adición de métodos aquí, o divida en varias clases o</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># multiple files as appropriate.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># archivos múltiples, según corresponda.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Having tests in multiple files makes</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Tener pruebas en múltiples archivos hace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># it possible to run tests from just one package:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg># hace posible la ejecución de pruebas desde un solo paquete:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&quot;&quot;&quot;This sets up a test suite that actually runs the tests in the class</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&quot;&quot;&quot;Esto establece un conjunto de pruebas que ejecuta las pruebas en la clase</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>above</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>anterior</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, we have a test suite with one test class - we could have added more classes if necessary.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Aquí tenemos un conjunto de pruebas con una clase de prueba; pudimos haber añadido más clases si es necesario.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;s0&gt;afterSetUp()&lt;/s0&gt; and &lt;s1&gt;beforeTearDown()&lt;/s1&gt; methods - if present - are called immediately before and after each test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Los métodos &lt;s0&gt;afterSetUp()&lt;/s0&gt; y &lt;s1&gt;beforeTearDown()&lt;/s1&gt;, si están presentes, son llamados inmediatamente antes y después de cada prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After a test is run, the transaction is rolled back, causing tests to run in isolation.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Después de que una prueba se ejecuta, la transacción se regresa, causando que pruebas se ejecuten de forma aislada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You only really need explicit teardown if your tests make permantent changes that are not covered by the ZODB transaction machinery.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Sólo se necesita realmente un teardown (desmontaje) explícito si sus pruebas hacen cambios permanentes que no están cubiertos por el mecanismo de transacción de la ZODB.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You are free to add whatever helper methods you wish to your unit test class, but any method with a name starting with &lt;s0&gt;test&lt;/s0&gt; will be executed as a test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Usted es libre de añadir cualquiera de los métodos de ayuda que desee para su clase de prueba unitaria, pero cualquier método con un nombre que comience con &lt;s0&gt;test&lt;/s0&gt; se ejecutará como una prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tests are usually written to be as concise (not to be confused with &quot;obfuscated&quot;) as possible.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Las pruebas suelen ser escritas para ser lo más conciso (no confundir con &quot;ofuscado&quot;) posible.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice the calls to methods like &lt;s0&gt;self.assertEqual()&lt;/s0&gt; or &lt;s1&gt;self.failUnless()&lt;/s1&gt;.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Vea las llamadas a los métodos como &lt;s0&gt;self.assertEqual()&lt;/s0&gt; o &lt;s1&gt;self.failUnless()&lt;/s1&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are the assertion methods that do the actual testing.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Estos son los métodos de afirmación que hace realmente la prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If any of these fail, that test is counted as a failure and you'll get an ugly F in your test output.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Si alguno de ellos falla, esa prueba se cuenta como una falla, y obtendrá un horrible F la salida de su prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To run the test, we would do:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Para ejecutar la prueba, haríamos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is actually more output than this, as PloneTestCase installs a number of products and processes ZCML.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>En realidad, hay más salida que ésta, ya que PloneTestCase instala una serie de productos y procesos ZCML.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rules of thumb</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Reglas generales</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are some basic rules of thumb for writing unit tests with PloneTestCase you should be aware of:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Hay algunas reglas básicas para escribir las pruebas unitarias con PloneTestCase que debería tener en cuenta :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Write test first, don't put it off, and don't be lazy (did we say this enough already?)</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Escriba la prueba primero; no sea perezoso y no aplace esto (¿ya no lo hemos dicho lo suficiente?)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Write one test (i.e. one method) for each thing you want to test</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Escriba una prueba (esto es, un método) para cada cosa que desea probar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Keep related tests together (i.e. in the same test case class)</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Mantenga las pruebas que se asemejen juntas (es decir, en la misma clase de caso de prueba)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be pragmatic.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Sea pragmático.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to test every combination of inputs and outputs you will probably go blue in the face, and the additional tests are unlikely to be of much value.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Si desea probar cada combinación de entradas y salidas probablemente su cara se tornará morada, y las pruebas adicionales son poco probables que sean de mucho valor. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, if a method is complicated, don't just test the basic case.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Del mismo modo, si un método es complicado, no pruebe solamente el caso básico.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This comes with experience, but in general, you should test common cases, edge cases and preferably cases in which the method or component is expected to fail (i.e. test that it fails as expected - you still shouldn't get any F's in your test output!).</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esto viene con la experiencia, pero en general, debe probar los casos más comunes, los casos extremos y preferiblemente los casos en que se espera que el método o componente falle (es decir, prueba que falle como es esperado; aun así ¡no debería conseguir ninguna F en la salida de su prueba!).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Keep tests simple.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Haga las pruebas sencillas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't try to be clever, don't over-generalise.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>No trate de ser demasiado astuto, y no generalice.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a test fails, you need to easily determine whether it is because the test itself is wrong, or the thing it is testing has a bug.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Cuando falla una prueba, es necesario determinar con facilidad si se debe a que la prueba en sí está mala, o si aquello que está analizando tiene un error.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assertion and utility methods in the unit testing framework</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Métodos de utilidad y afirmación en el framework de pruebas unitarias</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are quite a few assertion methods, most of which do basically the same thing - check if something is True or False.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Hay un considerable número de métodos de afirmación, y la mayoría hacen básicamente lo mismo. Comprobar si es algo es verdadero o falso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Having a variety of names allows you to make your tests read the way you want.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Tener una variedad de nombres le permite hacer sus pruebas de lectura de la manera que desee.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The list of assertion methods can be found in the Python documentation for &lt;s0&gt;unittest.TestCase&lt;/s0&gt;.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>La lista de métodos de afirmación se puede encontrar en la documentación de Python para &lt;s0&gt; unittest.TestCase &lt;/s0&gt; .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The most common ones are:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Los más comunes son:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ensure expr is true</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Asegúrese que expr es verdadero</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ensure expr1 is equal to expr2</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Asegura que expr1 sea igual a expr2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure exception is raised by the callable.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Asegúrese excepction (excepción) es levantada por callable.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that callable here should be the name of a method or callable object, not an actual call, so you write e.g. &lt;s0&gt;self.assertRaises(AttributeError, myObject.myMethod, someParameter)&lt;/s0&gt;.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Tenga en cuenta que callable aquí debe ser el nombre de un método o un objeto callable (que se puede llamar), no una llamada como tal, por lo que se escribe por ejemplo, &lt;s0&gt;self.assertRaises(AttributeError, myObject.myMethod, someParameter)&lt;/s0&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note lack of () after &lt;s1&gt;myMethod&lt;/s1&gt;.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Note la falta de () después de &lt;s1&gt;myMethod&lt;/s1&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you included it, you'd get the exception raised in your test method, which is probably not what you want.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Si lo incluye, obtendría la excepción arrojada en su método de prueba, que probablemente no es lo que usted quiere.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, the statement above will cause the unit testing framework to call &lt;s2&gt;myMethod(someParameter)&lt;/s2&gt; (you can pass along any parameters you want after the calalble) and check for an &lt;s3&gt;AttributeError&lt;/s3&gt;.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>En vez de eso, la sentencia anterior causará que el framework de pruebas unitarias llame &lt;s2&gt;myMethod(someParameter)&lt;/s2&gt; (puede pasar a lo largo de cualquier parámetro que desee después del callable) y revise por un &lt;s3&gt;AttributeError&lt;/s3&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Simply fail.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Falla simple.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is useful if a test has not yet been completed, or in an if statement inside a test where you know the test has failed.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Esto es útil si una prueba aún no se ha completado, o en una sentencia &quot;if&quot; dentro de una prueba donde sabe que la prueba ha fallado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to the unit testing framework assertion methods, ZopeTestCase and PloneTestCase include some helper methods and variables to help you interact with Zope.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Además de los métodos de afirmación para el framework de pruebas unitarias, ZopeTestCase y PloneTestCase incluyen algunos métodos de ayuda y variables que le ayudarán a interactuar con Zope.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's instructive to read the source code for these two products, but briefly, the key variables you can use in unit tests are:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Es instructivo leer el código fuente de estos dos productos, pero brevemente, las principales variables que puede utilizar en las pruebas unitarias son:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Plone portal the test is executing in</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>El portal de Plone que la prueba está ejecutando en</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The member folder of the member you are executing as</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>La carpeta de miembro del miembro que usted está ejecutando como</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And the key methods are:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Y los métodos claves son:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Log out, i.e. become anonymous</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Cerrar sesión, es decir, convertirse en usuario anónimo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Log in again.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Iniciar sesión nuevamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass a username to log in as a different user.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Pasar un nombre de usuario para acceder al sistema como un usuario diferente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pass in a list of roles you want to have.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Aprobar una lista de funciones que desee tener.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, self.setRoles(('Manager',)) lets you be manager for a while.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Por ejemplo, self.setRoles(('Manager',)) le permite ser el administrador por un tiempo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How nice.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Genial.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, grant a number of permissions to the current user in &lt;s0&gt;self.folder&lt;/s0&gt;.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Igualmente, garantizar un serie de permisos al usuario actual en &lt;s0&gt;self.folder&lt;/s0&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set which groups the test user is in.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Establece en que grupos está el usuario de prueba</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tips &amp; Tricks</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Consejos y trucos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Good unit testing comes with experience.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Buena pruebas unitarias vienen con la experiencia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's always useful to read the unit tests of code with which you are fairly familiar, to see how other people unit test.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Siempre es útil leer las pruebas unitarias de código con las que usted está más familiarizado, para ver cómo otras personas hacen pruebas unitarias.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We'll cover a few hints here to get you thinking about how you approach your own tests:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Vamos a cubrir algunas pistas aquí para empezar a pensar acerca de cómo enfocar sus propias pruebas:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't be timid!</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>¡No sea tímido!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Python, being a dynamic scripting language, lets you do all kinds of crazy things.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Python, al ser un lenguaje de programación dinámico, le permite hacer todo tipo de locuras.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can rip a function right out from the Plone core and replace it with your own implementation in afterSetUp() or a test if that serves your testing purposes.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Usted puede sacar una función fuera del core de Plone y reemplazarla con su propia implementación en afterSetUp() o una prueba si eso cumple con sus propósitos de prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, replacing things like the &lt;s0&gt;MailHost&lt;/s0&gt; with dummy implementations may be the only way to test certain features.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Igualmente remplazar cosas como el &lt;s0&gt;MailHost&lt;/s0&gt; con dummy implementations (mplementaciones simuladas) tal vez sea la única forma de probar ciertas características.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Look at &lt;s1&gt;CMFPlone/tests/dummy.py&lt;/s1&gt; for some examples of dummy objects.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Observe &lt;s1&gt;CMFPlone/tests/dummy.py&lt;/s1&gt; para algunos ejemplos de objetos dummy. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use tests to try things out.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Utilice pruebas para probar las cosas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are a safe environment.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Se tratan de un entorno seguro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to try something a bit out of the ordinary, writing them in a test is often the easiest way of seeing how something works.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Si usted necesita probar algo un poco fuera de lo común, escribirlos en una prueba a menudo es la manera más fácil de ver cómo funciona algo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>During debugging, you can insert print statements in tests to get traces in your terminal when you execute the tests.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Durante la depuración, puede insertar impresión de sentencias en las pruebas para obtener rastros en su terminal al ejecutar las pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't check in code with printing tests, though.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Sin embargo, no compruebe el código con impresión de sentencias.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, the python debugger is very valuable inside tests.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Del mismo modo, el depurador de Python es muy valioso dentro de pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Putting &lt;s0&gt;import pdb; pdb.set_trace()&lt;/s0&gt; inside your test methods lets you step through testing code and step into the code it calls.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Colocar &lt;s0&gt;import pdb; pdb.set_trace()&lt;/s0&gt; dentro de los métodos de prueba le permite desplazarse por el código de prueba y entrar en el código que este llama.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're not familiar with the python debugger, your life is incomplete.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Si usted no está familiarizado con el depurador de Python, su vida está incompleta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a1&gt;More about using pdb with Plone&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>&lt;a1&gt;Más sobre el uso de pdb con Plone&lt;/a1&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integration doctests using PloneTestCase</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Doctests de integración usando PloneTestCase</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The PloneTestCase integration test setup can also be used in doctests</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>El setup de prueba de integración PloneTestCase también puede usarse en doctests</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The choice of test case classes over doctest is purely one of syntactic preference.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>La elección de clases de caso de prueba sobre doctest es puramente de preferencias sintácticas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can use the test setup from the previous section (in &lt;s0&gt;base.py&lt;/s0&gt;) in a doctest as well.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Podemos utilizar el setup de prueba de la sección anterior (en &lt;s0&gt;base.py&lt;/s0&gt;) también en un doctest.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This type of test is more useful for documenting the integration of your code with Zope/Plone in a narrative fashion.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Este tipo de prueba es más útil para la documentar la integración de su código con Zope/Plone en una narrativa elegante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is no change to &lt;s0&gt;tests/base.py&lt;/s0&gt; for this type of setup.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>No hay ningún cambio a &lt;s0&gt;tests/base.py&lt;/s0&gt; para este tipo de setup (configuración)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, we must be careful to use a test class that derives from &lt;s1&gt;FunctionalTestCase&lt;/s1&gt;, since this performs the initialisation necessary for doctests.</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>Sin embargo, debemos tener cuidado de utilizar una clase de prueba que se deriva de &lt;s1&gt;FunctionalTestCase&lt;/s1&gt;, ya que realiza la inicialización necesaria para doctests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The test setup is found in &lt;s2&gt;tests/test_integration_doctest.py&lt;/s2&gt;:</seg>
      </tuv>
      <tuv lang="ES-VE">
        <seg>El setup de prueba se encuentra en &lt;s2&gt;tests/test_integration_doctest.py&lt;/s2&gt;:</seg>
      </tuv>
    </tu>
  </body>
</tmx>
