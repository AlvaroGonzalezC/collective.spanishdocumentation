<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header
    creationtool="OmegaT"
    creationtoolversion="2.0.5_4"
    segtype="sentence"
    o-tmf="OmegaT TMX"
    adminlang="EN-US"
    srclang="EN-US"
    datatype="plaintext"
  >
  </header>
  <body>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Testing in Plone</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Pruebas en Plone</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This tutorial will explain how to write safer, better code that makes you look more professional.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En este tutorial se explica cómo escribir código mejor y más seguro para darle un aspecto más profesional.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That's right - it's time to write tests, for everything you do.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Así es, es hora de escribir pruebas, para todo lo que haga.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Don't worry, it's not boring or complicated, you just need to learn how.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>No se preocupe, no es aburrido ni complicado, sólo tiene que aprender cómo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Introduction</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Introducción</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What is this thing called testing anyway?</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>¿Qué eso llamado pruebas?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;I know I should write tests, but ...</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;Yo se que tengo que escribir pruebas. pero...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>... they take time to write</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>...estas toman tiempo en escribirse</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>I’m a good developer</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>soy un buen desarrollador</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>... my customer / the community does the testing&quot;</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>... mi cliente/la comunidad hace las pruebas &quot;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sound familiar?</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>¿Le suena familiar?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No matter how good you think you are, you will make mistakes.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>No importa lo bueno que usted cree que es, siempre cometerá errores.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Your code will contain bugs and someone will come after you demanding an explanation.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Su código tendrá errores y alguien va a venir después a exigirle una explicación.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Without some methodical way of testing, you are guaranteeing your code with nothing more than guesswork and arrogance.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Sin alguna forma metódica de pruebas, usted estará garantizando su código con nada más que conjeturas y arrogancia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Clicking around the Plone interface for a few minutes before you ship your code off to the customer or user is simply not enough.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Pasear un poco por la interfaz de Plone durante algunos minutos antes de enviar el código al cliente o usuario simplemente no es suficiente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Testing is an art, it needs to be built into your development cycle from the very beginning - it is not something you do only after all the other work is finished, it is something you do continuously.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Hacer pruebas es un arte, tiene que estar integrado en su ciclo de desarrollo desde el principio. No es algo que se hace sólo después de que haya hecho todo el trabajo, es algo que tiene que hacer de forma continua.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unfortunately, testing often evokes emotions of dread in developers.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Desgraciadamente hacer pruebas a menudo evoca emociones de temor en los desarrolladores.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It's slow, it's boring, it's not what they signed up to do.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Es lento, es aburrido, no es lo que acordaron hacer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But the art of testing has evolved beyond that - there is considerable elegance and fun to be found in well-conceived test strategies.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Pero el arte de hacer pruebas ha evolucionado más allá de eso. Existe una considerable elegancia y diversión en el ambiente de buenas estrategias planteadas para hacer pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This tutorial aims to give you the tools you need to write tests and testable software in Plone.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Este tutorial apunta a darle las herramientas necesarias para escribir pruebas y software comprobable en Plone.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are writing software for Plone core itself, don't even think about commiting any bug fix or feature without test coverage.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si está escribiendo software para el núcleo (core) de Plone como tal, ni siquiera piense en cometer cualquier corrección de error o característica sin cobertura de pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are writing an add-on product or doing a customisation, holding yourself to the same high standards that the Plone core team do will give you better confidence in your software and will likely save you considerable pain down the road.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si usted está escribiendo un producto complementario o alguna personalización; manteniendo los mismos altos estándares que el equipo core de Plone le dará una mejor confianza en su software y probablemente le ahorrará dolor considerable a lo largo del camino.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Examples</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Ejemplos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This tutorial contains several examples of the various types of tests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Este tutorial contiene varios ejemplos de los distintos tipos de pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They are available in the <bpt i='0' x='0'>&lt;a0&gt;</bpt>example.tests<ept i='0'>&lt;/a0&gt;</ept> package, which you can install as a develop egg in a Plone 3 buildout.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Estas están disponibles en el paquete <bpt i='0' x='0'>&lt;a0&gt;</bpt>example.tests<ept i='0'>&lt;/a0&gt;</ept>, el cual puede instalar como un huevo de desarrollo en su buildout de Plone 3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The examples of running tests use the standard commands for buildouts, since this is the only way that works reliably on Windows (that is, plain <bpt i='1' x='1'>&lt;s1&gt;</bpt>zopectl test<ept i='1'>&lt;/s1&gt;</ept> will not work on Windows).</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Los ejemplos de pruebas de funcionamiento utilizan los comandos estándar para buildouts, ya que esta es la única forma que funcione de forma fiable en Windows (es decir <bpt i='1' x='1'>&lt;s1&gt;</bpt>zopectl test<ept i='1'>&lt;/s1&gt;</ept> no funcionará en Windows).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Managing projects with zc.buildout</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Administrando proyectos con zc.buildout</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Take a look at the <bpt i='0' x='0'>&lt;a0&gt;</bpt>buildout tutorial<ept i='0'>&lt;/a0&gt;</ept> for more information.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Revise el <bpt i='0' x='0'>&lt;a0&gt;</bpt>tutorial de buildout<ept i='0'>&lt;/a0&gt;</ept> para más información.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A brief example</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Un breve ejemplo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Just so that you know what we're talking about</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Sólo para que obtenga una idea de lo que estamos hablando.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Try to find the bug in the following piece of code:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Trate de encontrar el error en el siguiente fragmente de código:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Found it yet?</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>¿Ya lo encontró?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Did you have to spend more than a few seconds thinking about it?</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>¿tuvo que pasar más de unos segundos pensando en el error? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Any developer could have written that code and not seen the problem.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Cualquier desarrollador podría haber escrito ese código y no haber visto el problema.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Furthermore, the bug is an edge case that you may not have tested using manual/through-the-web testing.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Además, el error es un caso extremo que pudo no haber probado al hacer pruebas manual/a-través-de-la-Web.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let us write a test (actually, a doc/unit test) for this code.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Escribamos una prueba (realmente una prueba doc/unit) para este código:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Don't worry too much about how this is set up and executed just yet.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>No se preocupe demasiado acerca de cómo esto está configurado y ejecutado por el momento.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As it happens, the last test would fail.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Durante el proceso, la última prueba fallará.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It would print <bpt i='0' x='0'>&lt;s0&gt;</bpt>You are not an employee currently.<ept i='0'>&lt;/s0&gt;</ept>, unless we fixed the code:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Mostrará <bpt i='0' x='0'>&lt;s0&gt;</bpt>You are not an employee currently. (Actualmente usted no es un empleado)<ept i='0'>&lt;/s0&gt;</ept>, a menos que arreglemos el código:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The moral of the story?</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>¿Cuál es la moraleja de la historia?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>you rarely catch problems like these with manual testing</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>raramente se da cuenta de errores como este haciendo pruebas manualmente</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>put the time you waste catching silly bugs and typos into writing tests</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>pase el tiempo, que gasta en capturar errores tontos y errores de escritura, mejor escribiendo pruebas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>with decent test coverage, you end up saving lots of time when you refactor</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>con una decente cobertura de pruebas, usted termina ahorrándose grandes cantidades de tiempo cuando refactoriza</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Types of tests</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Tipos de pruebas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some terminology you should be familiar with</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Un poco de terminología con la cual debería estar familiarizado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Broadly speaking, there are four main types of tests:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En términos generales, hay cuatro tipos principales de pruebas:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unit tests</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Pruebas unitarias</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These are written from the programmer's perspective.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Estas son escritas desde la perspectiva del programador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A unit test should test a single method or function in isolation, to ensure that it behaves correctly.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Una prueba unitaria debe probar un sólo método o función en aislamiento, para asegurar que funciona correctamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, testing that a given calculation is performed correctly given a variety of input is a good unit test for that one method.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por ejemplo, probar que un cálculo determinado se realiza correctamente dado una variedad de entrada es una buena prueba unitaria para ese método.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Integration tests</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Pruebas de integración</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Whereas unit tests try to remove or abstract away as many dependencies as possible to ensure that they are truly only concerned with the method under test, integration tests exercise the integration points between a method or component and the other components it relies on.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Mientras que las pruebas unitarias tratan de eliminar o abstraer tantas dependencias como sea posible para asegurarse de que realmente sólo se preocupen por el método a probar, las pruebas de integración ejercitan los puntos de integración entre un método o componente y los demás componentes en los que este se basa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, testing that a method performs some calculation and then correctly stores the result in the ZODB is an integration test in that it tests the integration between that component and the ZODB.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por ejemplo, probar que un método realiza un cálculo y luego almacena correctamente el resultado en la ZODB (Base de datos de objetos Zope) es una prueba de integración, ya que prueba la integración entre el componente y la ZODB.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Functional tests</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Pruebas funcionales</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A functional test is typically demonstrating a use case, exercising a &quot;vertical&quot; of functionality.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Una prueba funcional suele demostrar un caso de uso, realizando una &quot;vertical&quot; de la funcionalidad.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, testing that filling in a form and clicking &quot;Save&quot; then makes the resulting object available for future use, is a functional test for the use case of using that form to create content objects.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por ejemplo, probar que luego del llenado de un formulario y hacer clic en &quot;Guardar&quot; haga que el objeto resultante esté disponible para su uso futuro, es una prueba funcional para el caso de uso de la utilización de ese formulario para crear objetos de contenido.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>System tests</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Pruebas de sistema</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These are written from the user's perspective, and treat the system as a black box.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Estas son escritas desde la perspectiva del usuario, y tratan el sistema como una caja negra.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A system test may be simulating a user interacting with the system according to expected usage patterns.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Una prueba de sistema puede probar el caso de un usuario interactuando con el sistema de acuerdo con los patrones de uso esperados. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By their nature, they are typically less systematic than the other types of tests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por su naturaleza, generalmente son menos sistemáticas que los otros tipos de pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Furthermore, functional tests may be <bpt i='0' x='0'>&lt;s0&gt;</bpt>white box<ept i='0'>&lt;/s0&gt;</ept>, in which case they can make assertions about things like the underlying data storage (but only if this is specified clearly; implementation details should never affect functional tests).</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Adicionalmente, las pruebas funcionales pueden ser <bpt i='0' x='0'>&lt;s0&gt;</bpt>caja blanca<ept i='0'>&lt;/s0&gt;</ept>, en cuyo caso pueden hacer afirmaciones sobre cosas como el almacenamiento de datos subyacentes (pero sólo si se especifica claramente; los detalles de implementación no deben afectar a las pruebas de funcionales).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Such tests are also called <bpt i='1' x='1'>&lt;s1&gt;</bpt>functional integration tests<ept i='1'>&lt;/s1&gt;</ept> (you can see where the lines start to blur, but don't worry too much about the naming).</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Estas pruebas también se denominan <bpt i='1' x='1'>&lt;s1&gt;</bpt>pruebas de integración funcional<ept i='1'>&lt;/s1&gt;</ept> (puede ver que los limites comienzan a borrarse, pero no se preocupe demasiado por los nombres).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Alternatively, functional tests can be <bpt i='2' x='2'>&lt;s2&gt;</bpt>black box<ept i='2'>&lt;/s2&gt;</ept> in which case they only perceive the system from the point of view of an actor (usually the end user) and make assertions only on what is presented in the (user) interface to that actor.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Alternativamente, las pruebas funcionales pueden ser <bpt i='2' x='2'>&lt;s2&gt;</bpt>caja negra<ept i='2'>&lt;/s2&gt;</ept>, en cuyo caso solo perciben el sistema desde el punto de vista de un actor (usualmente el usuario final) y hace afirmaciones basadas sólo en lo que es presentado en la interfaz de usuario para ese actor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Such tests, also known as <bpt i='3' x='3'>&lt;s3&gt;</bpt>acceptance tests<ept i='3'>&lt;/s3&gt;</ept> would not make assumptions about the underlying architecture at all.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Estas pruebas denominadas también <bpt i='3' x='3'>&lt;s3&gt;</bpt>pruebas de aceptación<ept i='3'>&lt;/s3&gt;</ept> no harán suposiciones sobre la arquitectura subyacente en absoluto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Tests and documentation</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Pruebas y documentación</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In a post to the Zope 3 mailing list, Jim Fulton explains the importance of tests and documentation, and how they go hand-in-hand:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En un mensaje a la lista de correos Zope 3, Jim Fulton explica la importancia de las pruebas y documentación, y la forma en que van mano a mano:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One of the important things about this is that most doctests<it pos='begin' x='0'>&lt;br0&gt;</it></seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Una cosa importante acerca de esto es que la mayoría de doctests<it pos='begin' x='0'>&lt;br0&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>   should be written as documentation.  When you write new software<it pos='begin' x='1'>&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>   debería escribirse como documentación. Cuando escribe nuevos componentes<it pos='begin' x='1'>&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>   components and you need to write tests for the main functionality<it pos='begin' x='2'>&lt;br2&gt;</it></seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>   de software y necesita escribir pruebas para funcionalidad principal<it pos='begin' x='2'>&lt;br2&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>   of your software you need to:<it pos='begin' x='3'>&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>   de su software usted necesita:<it pos='begin' x='3'>&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>   - Get your head into the mode of writing documentation.<it pos='begin' x='5'>&lt;br5&gt;</it></seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>   - Ponga su mente en modo para escribir documentación<it pos='begin' x='5'>&lt;br5&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>     This is very very very important.<it pos='begin' x='6'>&lt;br6&gt;</it></seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>     Esto es extremadamente importante.<it pos='begin' x='6'>&lt;br6&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>   - You need to document how to use the software.  Include examples,<it pos='begin' x='8'>&lt;br8&gt;</it></seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>   - Usted necesita documentar cómo usar el software.   Incluir ejemplos,<it pos='begin' x='8'>&lt;br8&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We will learn more about doctests, and how they are used for unit testing and functional testing later.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Más tarde aprenderemos más sobre doctests y como se usan para pruebas unitarias y funcionamiento.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The important thing to note is that good tests often serve as documentation describing how your component is supposed to be used.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Lo importante a destacar es que las buenas pruebas a menudo sirven como documentación describiendo cómo su componente se supone es utilizado. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thinking about the story they tell is just as important as thinking about the number of input and output states they cover.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Pensar en la historia que cuentan es tan importante como pensar en el número de estados de entrada y salida que cubren.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Telling stories with doctests</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Contando historias con doctests</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Doctests bring code and test closer together, and makes it easier to describe what a test does, and why.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Los Doctests ponen el código y prueba junto, y hace más fácil describir que hace una prueba, y por qué.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By their nature, tests should exercise an API and demonstrate how it is used.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por su naturaleza, la pruebas deberían ejercitar un API (Interfaz de programación de aplicaciones) y demostrar cómo se usa.  </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus, for other developers trying to understand how a module or library should be used, tests can be the best form of documentation.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por lo tanto, para otros desarrolladores tratando de entender cómo un módulo o biblioteca debería ser utilizado, las pruebas pueden ser la mejor forma de documentación.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Python supports the notion of <bpt i='0' x='0'>&lt;s0&gt;</bpt>doctests<ept i='0'>&lt;/s0&gt;</ept>, otherwise known as <bpt i='1' x='1'>&lt;s1&gt;</bpt>executable documentation<ept i='1'>&lt;/s1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Python soporta la noción de <bpt i='0' x='0'>&lt;s0&gt;</bpt>doctests<ept i='0'>&lt;/s0&gt;</ept>, también conocida como <bpt i='1' x='1'>&lt;s1&gt;</bpt>documentación ejecutable<ept i='1'>&lt;/s1&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Doctests look like Python interpreter sessions.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Los Doctests se asemejan a sesiones de Python interpreter.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They contain plain text (normally in reStructedText, which can be rendered to HTML or PDF easily) as well as <bpt i='0' x='0'>&lt;s0&gt;</bpt>examples<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Ellos contienen texto plano (normalmente en reStructedText, el cual puede ser renderizado a HTML o PDF fácilmente) así como <bpt i='0' x='0'>&lt;s0&gt;</bpt>ejemplos<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The idea is to show something that could have been typed in an interpreter session and what the expected outcome should be.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La idea es mostrar algo que podría haber sido escrito en una sesión interpreter (de intérprete) y lo que el resultado esperado debería ser.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the Zope 3 world, doctests are extremely prevalent and are used for most unit and integration testing.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En el mundo de Zope 3, los doctests son muy frecuentes y se utilizan para la mayoría de pruebas unitarias e de integración.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Doctests come in two main flavours: You can write a simple text file, such as a <bpt i='0' x='0'>&lt;s0&gt;</bpt>README.txt<ept i='0'>&lt;/s0&gt;</ept>, that explains your code along with verifiable examples, or you can add doctests for a given method or class into the docstring of that method or class.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Los doctests vienen principalmente en dos sabores: puede escribir un simple archivo como <bpt i='0' x='0'>&lt;s0&gt;</bpt>README.txt<ept i='0'>&lt;/s0&gt;</ept>, explicando su código junto a ejemplos verificables, o puede agregar doctests para un método o clase determinado dentro de la docstring (cadena de documentación) de ese método o clase.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The full-file approach - sometimes known as <bpt i='0' x='0'>&lt;s0&gt;</bpt>documentation-driven development<ept i='0'>&lt;/s0&gt;</ept> - is the most common.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El enfoque de archivo-completo, también conocido como <bpt i='0' x='0'>&lt;s0&gt;</bpt>desarrollo dirigido por documentación (documentation-driven development)<ept i='0'>&lt;/s0&gt;</ept> es el más común.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This type of test is very well suited for explaining how an API should be used and ensuring that it works as expected at the same time.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Este tipo de prueba es muy apropiado para explicar cómo una API se debe utilizar y al mismo tiempo asegurar que funciona como se espera.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, note that these are not technically proper unit tests, because there is no guarantee of isolation between the steps of the &quot;script&quot; that the doctest describes.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Sin embargo, note que estas técnicamente no son pruebas unitarias como tal, porque no hay ninguna garantía de aislamiento entre los steps del &quot;script&quot; que doctest describa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The docstring version uses the same basic syntax, but each docstring is executed as its own test fixture, guaranteeing full isolation between tests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La versión de cadena de documentación utiliza la misma sintaxis básica, pero cada una se ejecuta como su propia prueba fixture, garantizando el aislamiento total entre las pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here is a trivial example of a doctest.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Aquí hay un ejemplo trivial de un doctest.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We will learn how to set up such a test shortly.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Aprenderemos cómo configurar tal prueba en breve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Interfaces are defined using Python class statements::</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Las interfaces se definen mediante sentencias de clases Python::</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...        &quot;&quot;&quot;bar blah blah&quot;&quot;&quot; 

In the example above, we've created an interface::</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>...        &quot;&quot;&quot;bar blah blah&quot;&quot;&quot; 

En el ejemplo anterior, hemos creado una interfaz::</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&lt;class 'zope.interface.interface.InterfaceClass'&gt; 

We can ask for the interface's documentation::</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&lt;class 'zope.interface.interface.InterfaceClass'&gt; 

Podemos pedir la documentación de la interfaz::</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>'Foo blah blah'

We could create an arbitrary object - this will of course not provide 
the interface.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>'Foo blah blah'

Se podría crear un objeto arbitrario; por supuesto esto no proporcionará la interfaz.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each time the doctest runner encounters a line starting with <bpt i='0' x='0'>&lt;s0&gt;</bpt>&gt;&gt;&gt;<ept i='0'>&lt;/s0&gt;</ept>, the prompt of the Python interpreter (i.e. what you get by running <bpt i='1' x='1'>&lt;s1&gt;</bpt>python<ept i='1'>&lt;/s1&gt;</ept> without any arguments in a terminal), it will execute that line of code.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Cada vez que el runner de doctest se ejecuta y encuentra un línea que comienza con <bpt i='0' x='0'>&lt;s0&gt;</bpt>&gt;&gt;&gt;<ept i='0'>&lt;/s0&gt;</ept>, el indicador (línea de comandos) del Python interpreter (esto es, lo que obtiene al ejecutar <bpt i='1' x='1'>&lt;s1&gt;</bpt>python<ept i='1'>&lt;/s1&gt;</ept> sin argumentos en una terminal), ejecutará entonces esa línea de código.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If that statement is then immediately followed by a line with the same level of indentation as the <bpt i='2' x='2'>&lt;s2&gt;</bpt>&gt;&gt;&gt;<ept i='2'>&lt;/s2&gt;</ept> that is not a blank line and does not start with <bpt i='3' x='3'>&lt;s3&gt;</bpt>&gt;&gt;&gt;,<ept i='3'>&lt;/s3&gt;</ept> this is taken to be the expected output of the statement.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si esa sentencia es inmediatamente seguida por una línea con el mismo nivel de sangría que <bpt i='2' x='2'>&lt;s2&gt;</bpt>&gt;&gt;&gt;<ept i='2'>&lt;/s2&gt;</ept> que no es una línea en blanco y no comienza con <bpt i='3' x='3'>&lt;s3&gt;</bpt>&gt;&gt;&gt;,<ept i='3'>&lt;/s3&gt;</ept> esto se toma como el resultado esperado de la sentencia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The test runner will compare the output it got by executing the Python statement with the output specified in the doctest, and flag up an error if they don't match.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El runner de prueba comparará la salida que obtuvo mediante la ejecución de la sentencia de Python con la salida especificada en el doctest, e identificará un error si no coinciden.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that <bpt i='0' x='0'>&lt;e0&gt;</bpt>not<ept i='0'>&lt;/e0&gt;</ept> writing an output value is equivalent to stating that the method has no output.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Note que <bpt i='0' x='0'>&lt;e0&gt;</bpt>no<ept i='0'>&lt;/e0&gt;</ept> escribir un valor de salida es equivalente a afirmar que el método no posee salida.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus, this is a failure:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por lo tanto, se trata de una falla:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The reference to <bpt i='0' x='0'>&lt;s0&gt;</bpt>foo<ept i='0'>&lt;/s0&gt;</ept> on its own will print the value of foo.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La referencia a <bpt i='0' x='0'>&lt;s0&gt;</bpt>foo<ept i='0'>&lt;/s0&gt;</ept> por sí misma imprimirá el valor de foo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The correct DocTest would read:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El doctest correcto sería el siguiente:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice also the ... (ellipsis) element in the expected otuput.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Note también el elemento ... (puntos suspensivos) en la salida esperada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These mean &quot;any number of characters&quot; (anologus to a <bpt i='0' x='0'>&lt;s0&gt;</bpt>.*<ept i='0'>&lt;/s0&gt;</ept> statement in a regular expression, if you are familiar with those).</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Estos significan &quot;cualquier número de caracteres&quot; (análogo a una sentencia <bpt i='0' x='0'>&lt;s0&gt;</bpt>.*<ept i='0'>&lt;/s0&gt;</ept> en una expresión regular, si usted está familiarizado con ellas).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They are usually convenient shorthand, but they can sometimes be necessary.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usualmente es taquigrafía convenida, pero en ocasiones es necesaria. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por ejemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, the <bpt i='0' x='0'>&lt;s0&gt;</bpt>...<ept i='0'>&lt;/s0&gt;</ept> in the expected output replaces a hexadecimal memory address (<bpt i='1' x='1'>&lt;s1&gt;</bpt>0x0x4523a0<ept i='1'>&lt;/s1&gt;</ept> on the author's computer at the time of writing), which cannot be predicted in advance.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Aquí los <bpt i='0' x='0'>&lt;s0&gt;</bpt>...<ept i='0'>&lt;/s0&gt;</ept> en la salida esperada remplaza una dirección de memoria hexadecimal (<bpt i='1' x='1'>&lt;s1&gt;</bpt>0x0x4523a0<ept i='1'>&lt;/s1&gt;</ept> en la computadora del autor al momento de escribir), lo cual no se puede predecir de antemano.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When writing doctests in particular (but also when writing regular unit tests), you need to be careful about values you cannot predict, such as auto-generated ids based on the current time or a random number.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Cuando se escriben doctests en particular (pero también cuando se escriben pruebas unitarias regulares), usted necesita tener cuidado con los valores no puede predecir, como las identificaciones auto-generadas basadas en la hora actual o un número al azar.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The ellipsis operator can help you work around those.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El operador ellipsis (de puntos suspensivos) le puede ayudar a trabajar con esos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Do not confuse the ellipsis operator in the expected output with the syntax of using <bpt i='0' x='0'>&lt;s0&gt;</bpt>...<ept i='0'>&lt;/s0&gt;</ept> underneath a <bpt i='1' x='1'>&lt;s1&gt;</bpt>&gt;&gt;&gt;<ept i='1'>&lt;/s1&gt;</ept> line.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>No confunda el operador ellipsis en la salida esperada con la sintaxis de usar <bpt i='0' x='0'>&lt;s0&gt;</bpt>...<ept i='0'>&lt;/s0&gt;</ept> debajo de una línea <bpt i='1' x='1'>&lt;s1&gt;</bpt>&gt;&gt;&gt;<ept i='1'>&lt;/s1&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is the standard Python interpreter syntax used to designate statments that run over multiple lines, normally as the result of indentation.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esta es la sintaxis estándar de Python interpreter usada para designar sentencias que se ejecuten sobre líneas múltiples, normalmente como el resultado de sangría. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can, for example, write:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usted puede por ejemplo escribir:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if that is necessary in your test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>si es necesario en su prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Doctest tips and tricks</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Consejos y trucos para doctest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As with all testing, you will get better at doctests over time.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Así como lo es para el tema de pruebas, igualmente mejorará en el asunto de doctests con la practica.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Below are a few tips that may help you get started.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>A continuación se presentan algunos consejos que pueden ayudarle a empezar.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Read the documentation</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Lea la documentación</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>doctests have been in Python for a long time.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>los doctests han estado en Python desde hace mucho tiempo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i='0' x='0'>&lt;a0&gt;</bpt>doctest module<ept i='0'>&lt;/a0&gt;</ept> comes with more documentation on how they work.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El <bpt i='0' x='0'>&lt;a0&gt;</bpt>modulo de doctest<ept i='0'>&lt;/a0&gt;</ept> viene con más documentación sobre cómo funcionan.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A test is just a bunch of python statements!</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>¡una prueba es sólo un montón de sentencias Python!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Never forget this.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Nunca olvide eso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can, for example, reference helper methods in your own product, for example, imagine you have a method in <bpt i='0' x='0'>&lt;s0&gt;</bpt>Products.MyProduct.tests.utils<ept i='0'>&lt;/s0&gt;</ept> that has a method <bpt i='1' x='1'>&lt;s1&gt;</bpt>setUpSite()<ept i='1'>&lt;/s1&gt;</ept> to pre-populate your site with a few directories and users.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usted puede, por ejemplo, hacer referencia a métodos de ayuda (helper methods) en su propio producto, por ejemplo imagine que usted tiene un método en <bpt i='0' x='0'>&lt;s0&gt;</bpt>Products.MyProduct.tests.utils<ept i='0'>&lt;/s0&gt;</ept> que a su vez tiene un método <bpt i='1' x='1'>&lt;s1&gt;</bpt>setUpSite()<ept i='1'>&lt;/s1&gt;</ept> para llenar previamente su sitio con unos cuantos directorios y usuarios.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Your doctest could contain:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Su doctest podría contener:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The test suite can perform additional initialisation</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El conjunto de pruebas puede llevar a cabo inicialización adicional</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A test suite can have <bpt i='0' x='0'>&lt;s0&gt;</bpt>setUp()<ept i='0'>&lt;/s0&gt;</ept> and/or <bpt i='1' x='1'>&lt;s1&gt;</bpt>tearDown()<ept i='1'>&lt;/s1&gt;</ept> handlers that perform additional set-up or clean-up.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Un conjunto de pruebas puede tener controladores <bpt i='0' x='0'>&lt;s0&gt;</bpt>setUp()<ept i='0'>&lt;/s0&gt;</ept> y/o <bpt i='1' x='1'>&lt;s1&gt;</bpt>tearDown()<ept i='1'>&lt;/s1&gt;</ept> que realicen acciones adicionales de configuración o limpieza. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We will see further examples of this later.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Veremos ejemplos de esto más adelante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>PDB is still your friend</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>PDB sigue siendo su amigo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can put the standard <bpt i='0' x='0'>&lt;s0&gt;</bpt>import pdb; pdb.set_trace()<ept i='0'>&lt;/s0&gt;</ept> on a line in doctest.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usted puede colocar <bpt i='0' x='0'>&lt;s0&gt;</bpt>import pdb; pdb.set_trace()<ept i='0'>&lt;/s0&gt;</ept> en una línea en doctest.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unfortunately, you can't step through a doctest line by line, but you can print variables and examine the state of the test fixture.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Lamentablemente, no se puede ir línea por línea a través de un doctest, pero puede imprimir variables y examinar el estado de la prueba fixture.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can catch exceptions</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usted puede capturar las excepciones</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need to debug a doctest that is throwing an exception, this statement is often useful:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si necesita depurar un doctest que está arrojando una excepción, esta sentencia es a menudo útil:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Running tests</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Ejecutando pruebas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is not much good writing a test or relying on someone else's tests if you don't know how to run them.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>No sirve de mucho escribir una prueba o confiar en las pruebas de otra persona si no sabe cómo ejecutarlas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The easiest way to run tests in Zope is to use <bpt i='0' x='0'>&lt;s0&gt;</bpt>zopectl<ept i='0'>&lt;/s0&gt;</ept> or the equivalent control script.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La forma más fácil de ejecutar pruebas en Zope es el uso de <bpt i='0' x='0'>&lt;s0&gt;</bpt>zopectl<ept i='0'>&lt;/s0&gt;</ept> o el script de control equivalente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This would run all tests in the <bpt i='0' x='0'>&lt;s0&gt;</bpt>Products.RichDocument<ept i='0'>&lt;/s0&gt;</ept> module.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Este ejecutará todas las pruebas en el módulo <bpt i='0' x='0'>&lt;s0&gt;</bpt>Products.RichDocument<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are using a <bpt i='1' x='1'>&lt;a1&gt;</bpt>buildout<ept i='1'>&lt;/a1&gt;</ept> with an instance control script called <bpt i='2' x='2'>&lt;s2&gt;</bpt>instance<ept i='2'>&lt;/s2&gt;</ept>, this would be:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si usted está usando <bpt i='1' x='1'>&lt;a1&gt;</bpt>buildout<ept i='1'>&lt;/a1&gt;</ept> con un script de control de instancia llamado <bpt i='2' x='2'>&lt;s2&gt;</bpt>instance<ept i='2'>&lt;/s2&gt;</ept>, esto sería:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using buildout is probably a good idea - see <bpt i='0' x='0'>&lt;a0&gt;</bpt>the buildout tutorial<ept i='0'>&lt;/a0&gt;</ept> - not at least because this is the only way that works reliably on Windows.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usar buildout es probablemente una buena idea (vea <bpt i='0' x='0'>&lt;a0&gt;</bpt>el tutorial de buildout<ept i='0'>&lt;/a0&gt;</ept>) para empezar porque es la única forma que funcione de forma fiable en Windows.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We will use this syntax from now on.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usaremos esta sintaxis de ahora en adelante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To execute a single test or a set of tests matched by regular expression, you can use:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Para ejecutar una sola prueba o un conjunto de pruebas acompañada de expresiones regulares, puede utilizar:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This would run tests in files like <bpt i='0' x='0'>&lt;s0&gt;</bpt>test_setup.py<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto puede ejecutar pruebas en archivos como <bpt i='0' x='0'>&lt;s0&gt;</bpt>test_setup.py<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To run all doctests in <bpt i='1' x='1'>&lt;s1&gt;</bpt>README.txt<ept i='1'>&lt;/s1&gt;</ept> (presuming there was a test suite for this file) you would write:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Para ejecutar todos los doctests en <bpt i='1' x='1'>&lt;s1&gt;</bpt>README.txt<ept i='1'>&lt;/s1&gt;</ept> (asumiendo que hay un conjunto de pruebas para este archivo) tendría que escribir:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The new test runner also includes a few debugging options.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El nuevo runner de pruebas también incluye algunas opciones para depuración.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This will stop execution at the first failing test and drop into a PDB post-mortem.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto detendrá la ejecución en la primera prueba fallida y lo situará dentro de un PDB post-mortem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To see the other options that are available, run:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Para ver las otras opciones que están disponibles, ejecute:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the tests you think are relevant all pass, it's time to run all tests and make sure nothing else broke.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Cuando las pruebas que considere relevante pasaron, es el momento de ejecutar todas las pruebas y asegurarse de que nada más esté dañado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(No, we don't care that you are writing your code in a totally different python module than what those other tests are supposed to test, and that they were all fine and good and all you changed was a docstring.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>(No, no nos importa si usted está escribiendo su código en un módulo de Python totalmente distinto que el aquel de esas otras pruebas se supone que prueben, y que todas estaban bien, y lo único que cambió fue una docstring (cadena de documentación).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Run the tests when you think you're done.)</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Ejecute la prueba cuando piense que este listo).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When tests finish running, you will see a report like:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Cuando las pruebas terminen de ejecutarse, usted verá un reporte como este:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(it may look slightly different, depending on which test runner you are using)</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>(puede lucir un poco diferente, dependiendo de cual runner de prueba esté usted utilizando)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Rehearse a satisfied sigh as you read the line &quot;OK&quot;, as opposed to seeing a count of failed tests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Practique un suspiro de satisfacción para cuando lea la línea &quot;OK&quot;, en lugar de ver un recuento de pruebas fallidas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With time, this will be the little notifier that lets you go to bed, see your friends again or generally get back to real life with an <bpt i='0' x='0'>&lt;s0&gt;</bpt>svn commit<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Con el tiempo, este será el pequeño notificador que le permite ir a la cama, ver a sus amigos una vez más o en general volver a la vida real con un <bpt i='0' x='0'>&lt;s0&gt;</bpt>svn commit<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you're not so lucky, you may see:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si no tiene tanta suerte, puede que vea:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(again, the output may look slightly different depending on your test runner, but the same information should always be there)</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>(de igual manera la salida puede ser algo diferente dependiendo del runner de prueba, pero la información será esencialmente la misma)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This means that there were 1 python error and 1 failed test during test execution.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto significa que hubo 1 error y 1 prueba fallida durante la ejecución de la prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A python error means that some of your test code, or some code that was called by a test, raised an exception.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Un error de Python significa que algo de su prueba de código, o un código que fue llamado por una prueba, arrojó una excepción.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is bad, and you should fix it right away.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto no es algo bueno, y debería arreglarlo inmediatamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A failed test means that your test was trying to assert something that turned out not to be true.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Una prueba fallida significa que su prueba estaba tratando de afirmar algo que resultó no ser verdadero.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This could be OK.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto podría estar bien.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It could mean you haven't written the code the test is testing yet (well done, you wrote the test first!), or that you don't yet know why it's failing.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Podría significar que no ha escrito el código que la prueba está probando (bien hecho, ¡escribió la prueba primero!), o que no sabe todavía por qué está fallando.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sometimes you may be radically refactoring or rewriting parts of your code, and the tests will keep on failing until you're done.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>A veces puede que esté radicalmente refactorizando o reescribiendo partes de su código, y las pruebas seguirán fallando hasta que haya terminado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Incidentally, this is part of the reason why unit tests are so good - you can do that kind of stuff.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por cierto, esto es parte de la razón por la cual las pruebas unitarias son tan buenos; usted puede hacer ese tipo de cosas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It's sometimes (not always - don't try this on Plone core unless you've been told it's OK by the release manager) acceptable to go to bed and check in a failing test if you are not in a position to know how to fix it.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>A veces es (no siempre, no intente hacer esto en el core de Plone a menos que se le haya dicho que está bien por el administrador) aceptable ir a la cama y reportar una prueba fallida si no está en la posición de saber cómo solucionarla.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>At least other developers will be aware of the problem and may be able to fix it.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Al menos otros desarrolladores estarán al tanto del problema y podrían estar en la capacidad de solucionarlo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writing unit tests</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Escribiendo una prueba unitaria</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now that you understand the principle of tests and how to run them, it's time to write some.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Ahora que usted entiende el principio de las pruebas y la forma de ejecutarlas, es momento de escribir algunas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We will start with simple unit tests using doctest syntax.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Empezaremos con simples pruebas unitarias usando sintaxis de doctest.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We will start by showing how to create a simple unit test with doctest syntax.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Vamos a empezar por cómo crear una simple prueba unitaria con una sintaxis doctest.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is nothing Zope- or Plone-specific about this test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>No hay nada específico de Zope o Plone relacionado a esta prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This type of test is ideal for methods and classes that perform some kind of well-defined operation on primitives or simple objects.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Este tipo de prueba es ideal para métodos y clases que realizan algún tipo de operación bien definida en primitivas o objetos simples.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The doctest syntax is well-suited for explaining the inputs and outputs.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La sintaxis doctest es muy adecuada para explicar las entradas y salidas. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Since the tests are relatively few and/or descriptive, keeping the tests, documentation and code close together makes sense.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Ya que las pruebas son relativamente pocas y/o descriptivas, mantener las documentación, pruebas y código juntos tiene sentido.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Tests are usually found in a <bpt i='0' x='0'>&lt;s0&gt;</bpt>tests/<ept i='0'>&lt;/s0&gt;</ept> sub-package.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Las pruebas generalmente se encuentran en un sub-paquete <bpt i='0' x='0'>&lt;s0&gt;</bpt>tests/<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the <bpt i='1' x='1'>&lt;s1&gt;</bpt>example.tests<ept i='1'>&lt;/s1&gt;</ept> package, we have created a file called <bpt i='2' x='2'>&lt;s2&gt;</bpt>tests/test_simple_doctest.py<ept i='2'>&lt;/s2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En el paquete <bpt i='1' x='1'>&lt;s1&gt;</bpt>example.tests<ept i='1'>&lt;/s1&gt;</ept>, hemos creado un archivo llamado <bpt i='2' x='2'>&lt;s2&gt;</bpt>tests/test_simple_doctest.py<ept i='2'>&lt;/s2&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This sets up a test suite to run doctests in the doc strings in the module <bpt i='3' x='3'>&lt;s3&gt;</bpt>example.tests.context<ept i='3'>&lt;/s3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto establece un conjunto de pruebas para ejecutar doctests en las cadenas de documentación en el módulo <bpt i='3' x='3'>&lt;s3&gt;</bpt>example.tests.context<ept i='3'>&lt;/s3&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let's look at the test setup first:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Primero echemos un vistazo a la configuración de la prueba:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;This is the setup for a doctest where the actual test examples are held in 
docstrings in a module.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Esta es la configuración de un doctest donde los ejemplos de pruebas se mantienen en docstrings en un módulo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, we are not using anything Zope-specific at all.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En este caso, no estamos usando nada Zope-específico en absoluto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We could of course 
use the Zope 3 Component Architecture in the setup if we wanted.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por supuesto que podríamos utilizar la arquitectura de componentes de Zope 3 en la configuración si quisiéramos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For that,
take a look at test_zope3_doctest.py.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>para esto,
revise test_zope3_doctest.py.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, we *do* use the zope.testing package, which provides improved
version of Python's standard DocTestSuite, DocFileSuite and so on.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Sin embargo *si* usamos el paquete zope.testing, el cual proporciona un versión mejorada de DocTestSuite estándar de Python, DocFileSuite entre otros.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you
don't want this dependency, just use doctest.DocTestSuite.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si usted
no quiere esta dependencia, simplemente use doctest.DocTestSuite.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;We can use this to set up anything that needs to be available for</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Podemos usar esta opción para configurar todo lo que tiene que estar disponible para</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>each test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>cada prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is run before each test, i.e. for each docstring that</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Se ejecuta para cada prueba, es decir, para docstring que</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>contains doctests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>contiene doctests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Look at the Python unittest and doctest module documentation to learn</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Revise la documentación de Python para pruebas unitarias y módulos doctest para aprender</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>more about how to prepare state and pass it into various tests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>más sobre cómo preparar el estado y pasarlo en varias pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;This is the companion to setUp - it can be used to clean up the</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Este es el compañero del setUP; se puede utilizar para limpiar el</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>test environment after each test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>entorno de prueba después de cada prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># Here, we tell the test runner to execute the tests in the given</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># Aquí. le decimos al runner de prueba que ejecute la prueba en tal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># module.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># módulo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The setUp and tearDown methods can be used to perform</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Los métodos setUP y tearDown pueden usarse para llevar a cabo </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># test-specific setup and tear-down.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># configuración de prueba-especifica y desmontaje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>setUp=setUp,          # setUp and tearDown are optional!</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>setUp=setUp,          # ¡setUp y tearDown son opcionales!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are a lot of comments here, and we show how to use <bpt i='0' x='0'>&lt;s0&gt;</bpt>setUp()<ept i='0'>&lt;/s0&gt;</ept> and <bpt i='1' x='1'>&lt;s1&gt;</bpt>tearDown()<ept i='1'>&lt;/s1&gt;</ept> methods for additional initialisation and clean-up, if necessary.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Hay un montón de comentarios aquí, y mostramos cómo usar los métodos <bpt i='0' x='0'>&lt;s0&gt;</bpt>setUp()<ept i='0'>&lt;/s0&gt;</ept> y <bpt i='1' x='1'>&lt;s1&gt;</bpt>tearDown()<ept i='1'>&lt;/s1&gt;</ept> inicialización adicional y limpieza, en caso de que sea necesario.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The test runner will call the <bpt i='2' x='2'>&lt;s2&gt;</bpt>test_suite()<ept i='2'>&lt;/s2&gt;</ept> method and expect a <bpt i='3' x='3'>&lt;s3&gt;</bpt>TestSuite<ept i='3'>&lt;/s3&gt;</ept> object back.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El runner de prueba llamará el método <bpt i='2' x='2'>&lt;s2&gt;</bpt>test_suite()<ept i='2'>&lt;/s2&gt;</ept> y esperará un objeto <bpt i='3' x='3'>&lt;s3&gt;</bpt>TestSuite<ept i='3'>&lt;/s3&gt;</ept> como respuesta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If desired, we could have put multiple test suites referring to multiple modules into the <bpt i='4' x='4'>&lt;s4&gt;</bpt>TestSuite<ept i='4'>&lt;/s4&gt;</ept> that is being returned.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si se desea, podríamos haber puesto varios conjuntos de pruebas que se refieran a múltiples módulos dentro del <bpt i='4' x='4'>&lt;s4&gt;</bpt>TestSuite<ept i='4'>&lt;/s4&gt;</ept> que está respondiendo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here is the actual code under test, in <bpt i='0' x='0'>&lt;s0&gt;</bpt>context.py<ept i='0'>&lt;/s0&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Aquí está el código tras la prueba, en <bpt i='0' x='0'>&lt;s0&gt;</bpt>context.py<ept i='0'>&lt;/s0&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;An object used for testing.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Un objeto usado para hacer pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We will register an adapter from this</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Vamos a registrar un adaptador de esta</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>interface to IUpperCaser in the test setup.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>interfaz para IUpperCaser en la configuración de la prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here's how you use it.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Aquí está cómo usarla.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First, import the class.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Primero, importe la clase</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&gt;&gt;&gt; from example.tests.context import Context</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&gt;&gt;&gt; de Contexto de importación example.tests.context</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Then in-stan-ti-ate it (with me so far?):</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Luego haga una instanciación (¿sigue conmigo?):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Okay, here's the tricky bit ... now we need to set the title:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Bueno, aquí está el truco...ahora tenemos que definir el título:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&gt;&gt;&gt; my_context.title = u&quot;Some string!&quot;</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&gt;&gt;&gt; my_context.title = u&quot;¡alguna cadena!&quot;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Phew ... did that work?</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>uf...¿funcionó eso?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>u'Some string!'</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>u'¡alguna cadena!'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Yeah!</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>¡Así es!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here is how we may run the tests from a buildout:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Así es como puede ejecutar las pruebas desde un buildout:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Testing a Zope 3 component with a separate doctest file</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Probando un componente Zope 3 con un archivo separado doctest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sometimes, we may need to perform additional set-up for our tests to run properly.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>A veces, puede ser necesario realizar configuración adicional para que nuestras pruebas se ejecuten correctamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the previous example, we wrote a doctest in a docstring.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En el ejemplo previo, escribimos un doctest en un docstring.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As tests become more complex or require more involved configuration, it is usually better to separate the actual test into a text file.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Como las pruebas se hacen más complejos o que requieren una configuración más profunda. por lo general es mejor separar la prueba como tal en un archivo de texto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sometimes, this can be the <bpt i='0' x='0'>&lt;s0&gt;</bpt>README.txt<ept i='0'>&lt;/s0&gt;</ept> file of a package.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Algunas veces, este puede ser el archivo <bpt i='0' x='0'>&lt;s0&gt;</bpt>README.txt<ept i='0'>&lt;/s0&gt;</ept> de un paquete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is the approach favoured by Zope 3 components.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Este es el enfoque preferido por los componentes de Zope 3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, we will register an adapter that is used in a doctest.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En este ejemplo, vamos a registrar un adaptador que se utiliza en un doctest.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This doctest also serves to illustrate how this particular adapter should be used.  This style of test is great when the emphasis is on the documentation as well as the test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Este doctest también sirve para ilustrar cómo este adaptador en particular debe ser utilizado. Este estilo de prueba es genial cuando se hace hincapié en la documentación así como en la prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that we do not load the package's ZCML in its entirely.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Tenga en cuenta que no cargamos el paquete ZCML en su totalidad.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, we register the required components explicitly.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En su lugar, registramos los componentes necesarios de forma explícita.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This means that we retain control over what is executed in the test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto significa que poseemos el control sobre lo que es ejecutado en la prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We use the <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.component.testing.tearDown<ept i='0'>&lt;/s0&gt;</ept> method to ensure that our test environment is properly cleaned up.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Nosotros usamos el método <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.component.testing.tearDown<ept i='0'>&lt;/s0&gt;</ept> para asegurarnos que nuestro entorno de prueba esta debidamente limpio.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the <bpt i='0' x='0'>&lt;s0&gt;</bpt>example.tests<ept i='0'>&lt;/s0&gt;</ept> package, we have the following test setup in <bpt i='1' x='1'>&lt;s1&gt;</bpt>tests/test_zope3_doctest.py<ept i='1'>&lt;/s1&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En el paquete <bpt i='0' x='0'>&lt;s0&gt;</bpt>example.tests<ept i='0'>&lt;/s0&gt;</ept>, tenemos la siguiente configuración de prueba en <bpt i='1' x='1'>&lt;s1&gt;</bpt>tests/test_zope3_doctest.py<ept i='1'>&lt;/s1&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;This is the setup for a doctest that tests a Zope 3 component.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Esta es la configuración para un doctest que prueba un componente de Zope 3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is really nothing too different from a &quot;plain Python&quot; test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Realmente no hay nada muy diferente a una prueba &quot;plain Python&quot;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We are not
parsing ZCML, for example.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Nosotros no estamos
analizando ZCML, por ejemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, we use some of the helpers from Zope 3
to ensure that the Component Architecture is properly set up and torn down.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Sin embargo, usamos algunos de los helpers de Zope 3
para asegurar que la Component Architecture (Arquitectura de Componente) este debidamente creada y desmontada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;This method is used to set up the test environment.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Este método se utiliza para configurar el entorno de prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We pass it to the</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Lo pasamos al</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We also pass a tear-down, but in this case,</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>También pasamos un tear-down (desmontaje), pero en este caso,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>we use the tear-down from zope.component.testing, which takes care of</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>usamos un tear-down desde zope.component.testing, el cual se encarga de </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>cleaning up Component Architecture registrations.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>limpiar los registros de Component Architecture.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># Register the adapter.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># Registre el adaptador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See zope.component.interfaces for more</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Vea zope.component.interfaces para más información</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># file.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># archivo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The setUp and tearDown methods employed make use of the Zope 3</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Los métodos setUp y tearDown empleados hacen uso de Zope 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># Component Architecture, but really there is nothing Zope-specific</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># Component Architecture, pero realmente no hay nada Zope-específico</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># about this.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># acerca de esto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you want to test &quot;plain-Python&quot; this way, the setup</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si quiere probar &quot;plain-Python&quot; de esta manera, la configuración</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># is the same.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># es la misma.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice how we use a custom <bpt i='0' x='0'>&lt;s0&gt;</bpt>setUp()<ept i='0'>&lt;/s0&gt;</ept> method to register the custom adapter, and then reference <bpt i='1' x='1'>&lt;s1&gt;</bpt>zope.component.testing.tearDown<ept i='1'>&lt;/s1&gt;</ept> for the tear-down method.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Observe cómo se utiliza un método personalizado <bpt i='0' x='0'>&lt;s0&gt;</bpt>setUp()<ept i='0'>&lt;/s0&gt;</ept> para registrar el adaptador personalizado, y después hacer referencia a <bpt i='1' x='1'>&lt;s1&gt;</bpt>zope.component.testing.tearDown<ept i='1'>&lt;/s1&gt;</ept> para el método de desmontaje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This refers to the file <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope3.txt<ept i='0'>&lt;/s0&gt;</ept>, which looks like this:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto se refiere al archivo <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope3.txt<ept i='0'>&lt;/s0&gt;</ept>, que luce como este:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>==========================
A Zope 3 component doctest
==========================

This is the type of test found most commonly in Zope 3.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>==========================
Un doctest de componente Zope 3
==========================

Este es el tipo de prueba que se encuentran más comúnmente en Zope 3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We have a custom
setup method (in test_zope3_doctest.py) which registers the components we
need for the test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Tenemos un método de configuración personalizado (in test_zope3_doctest.py) el cual registra los componentes que necesitamos para la prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can then use those here.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>A continuación podemos utilizar esos aquí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>ZCML is not processed directly,
nor do we have a full Zope 2/Plone environment available.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El ZCML no es procesado directamente,
tampoco tenemos un entorno completo Zope 2/Plone disponible.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This makes the test
more isolated (and faster!).</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto hace que la prueba esté
más asilada (¡y más rápida!).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Often, we may choose to use mock implementations
of certain components in order to make the test properly isolated.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>A menudo, se puede optar por utilizar las implementaciones simuladas de ciertos componentes a fin de hacer la prueba correctamente aislada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Of course, we should still tell a story with this documentation.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por supuesto, igual deberíamos contar una historia con esta documentación.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let's say we had one of our really exciting context objects:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Digamos que teníamos uno de nuestros objetos de contexto realmente emocionantes:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&gt;&gt;&gt; context.title = u&quot;Some puny title&quot;

Of course, that's nice, but what if we wanted to make a bit more of an impact?</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&gt;&gt;&gt; context.title = u&quot;cualquier título&quot;

Por supuesto eso está bien, pero y que si ¿quisiéramos hacer un poco más de un impacto?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can use our handy upper-caser adapter!</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Podemos utilizar nuestro útil adaptador upper-caser!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>u'SOME PUNY TITLE'</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>u'CUALQUIER TÍTULO'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Wow!</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>¡Vaya!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To run just this test, we may do:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Para ejecutar sólo esta prueba, podemos hacer:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writing a PloneTestCase unit/integration test</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Escribiendo una prueba unitaria/integración PloneTestCase</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sometimes, we need access to a full-blown Plone instance in order to effectively write tests</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>A veces, tenemos que tener acceso a una instancia Plone en todas sus facetas con el fin de escribir efectivamente las pruebas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i='0' x='0'>&lt;s0&gt;</bpt>PloneTestCase<ept i='0'>&lt;/s0&gt;</ept>, which in turn uses <bpt i='1' x='1'>&lt;s1&gt;</bpt>ZopeTestCase<ept i='1'>&lt;/s1&gt;</ept>, is used to set up a full Zope environment, including a Plone instance, for testing.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg><bpt i='0' x='0'>&lt;s0&gt;</bpt>PloneTestCase<ept i='0'>&lt;/s0&gt;</ept>, que a su vez utiliza <bpt i='1' x='1'>&lt;s1&gt;</bpt>ZopeTestCase<ept i='1'>&lt;/s1&gt;</ept>, se utiliza para configurar un entorno de Zope completo, incluyendo una instancia de Plone, para hacer pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This type of test is very convenient and often necessary because content types, tools and other parts of Plone have hard dependencies on various underlying Zope, CMF and Plone components.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Este tipo de prueba es muy conveniente y a menudo necesario debido a los tipos de contenido, herramientas y otras partes de Plone tienen dependencias estrictas en distintos subyacentes Zope, CMF y componentes de Plone.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is generally better to write simpler tests, however, both because they provide better isolation (thus testing the component more directly and under better controlled circumstances) and because they execute faster.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En general es mejor para escribir pruebas más sencillas, sin embargo, tanto debido a que proporcionan un mejor aislamiento (lo que prueba el componente más directamente y en mejores condiciones controladas) y se ejecutan más rápidamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>PloneTestCase-tests are often referred to as &quot;unit tests&quot;, but in truth they are <bpt i='0' x='0'>&lt;e0&gt;</bpt>integration<ept i='0'>&lt;/e0&gt;</ept> tests, since they depend on a &quot;live&quot; Zope instance and thus test the integration between your code and the underlying framework.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>PloneTestCase-tests regularmente se refieren a &quot;pruebas unitarias&quot;, pero en realidad son pruebas de <bpt i='0' x='0'>&lt;e0&gt;</bpt>integración<ept i='0'>&lt;/e0&gt;</ept>, ya que dependen de una instancia &quot;viva&quot; de Zope y así probar la integración entre su código y el framework subyacente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can use the PloneTestCase setup to run doctests, as we will see in the next section.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Podemos usar el setup de PloneTestCase para ejecutar doctests, como veremos en la próxima sección.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, however, we will demonstrate how to use <bpt i='0' x='0'>&lt;s0&gt;</bpt>unittest.TestCase<ept i='0'>&lt;/s0&gt;</ept> classes, where each test is a method on a class (with a name beginning with <bpt i='1' x='1'>&lt;s1&gt;</bpt>test<ept i='1'>&lt;/s1&gt;</ept>) This type of test is not as good for documentation, but can be very useful for systematically executing many variations on the same test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>No obstante aquí demostraremos cómo usar clases <bpt i='0' x='0'>&lt;s0&gt;</bpt>unittest.TestCase<ept i='0'>&lt;/s0&gt;</ept>, donde cada prueba es un método en una clase (con un nombre que comienza con <bpt i='1' x='1'>&lt;s1&gt;</bpt>test<ept i='1'>&lt;/s1&gt;</ept>) Este tipo de prueba no es muy buena documentación, pero puede ser muy útil para la ejecución sistemática de muchas variaciones en la misma prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some developers also find this type of test easier to debug, since it is plain Python code which can be stepped through using the debugger.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Algunos desarrolladores también encuentran este tipo de prueba más fácil de depurar, ya que es código normal de Python que se puede recorrer utilizando un depurador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the <bpt i='0' x='0'>&lt;s0&gt;</bpt>example.tests<ept i='0'>&lt;/s0&gt;</ept> package, we have <bpt i='1' x='1'>&lt;s1&gt;</bpt>tests/base.py<ept i='1'>&lt;/s1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En el paquete <bpt i='0' x='0'>&lt;s0&gt;</bpt>example.tests<ept i='0'>&lt;/s0&gt;</ept>, tenemos <bpt i='1' x='1'>&lt;s1&gt;</bpt>tests/base.py<ept i='1'>&lt;/s1&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This does not contain any tests, but performs the necessary configuration to set up the test fixture:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Este no contiene ninguna prueba, sino que realiza la configuración necesaria para definir la prueba fixture:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;Test setup for integration and functional tests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Configuración de pruebas funcionales y de integración</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When we import PloneTestCase and then call setupPloneSite(), all of Plone's
products are loaded, and a Plone site will be created.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>cuando importamos PloneTestCase y luego llamamos setupPloneSite(), todos los productos de Plone son cargados, y un sitio Plone será creado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This happens at module
level, which makes it faster to run each test, but slows down test runner
startup.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto ocurre a nivel de módulo, 
lo que hace que sea más rápido para ejecutar cada prueba,
pero ralentiza el arranque del runner de prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;

from Products.Five import zcml
from Products.Five import fiveconfigure

from Testing import ZopeTestCase as ztc

from Products.PloneTestCase import PloneTestCase as ptc
from Products.PloneTestCase.layer import onsetup

#
# When ZopeTestCase configures Zope, it will *not* auto-load products in 
# Products/.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;

from Products.Five import zcml
from Products.Five import fiveconfigure

from Testing import ZopeTestCase as ztc

from Products.PloneTestCase import PloneTestCase as ptc
from Products.PloneTestCase.layer import onsetup

#
# Cuando ZopeTestCase configura Zope, este *no* auto-cargará productos en 
# Products/.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, we have to use a statement such as:
# 
#   ztc.installProduct('SimpleAttachment')
# 
# This does *not* apply to products in eggs and Python packages (i.e. not in
# the Products.*) namespace.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En su lugar, tenemos que usar una sentencia como:
# 
#   ztc.installProduct('SimpleAttachment')
# 
# Esto *no* aplica a productos en huevos ni al namespace (espacio de nombre) de paquetes Python (es decir, no en
# los Productss.*) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For that, see below.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>para esto, vea a continuación</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># 
# All of Plone's products are already set up by PloneTestCase.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># 
# Todos los productos de Plone están ya establecidos por PloneTestCase.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;Set up the package and its dependencies.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Configure el paquete y sus dependencias.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The @onsetup decorator causes the execution of this body to be deferred</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El decorador @onsetup provoca que la ejecución de este cuerpo sea aplazada</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>until the setup of the Plone site testing layer.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>hasta la configuración de la capa de pruebas del sitio Plone.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We could have created our</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Pudimos haber creado nuestra</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>own layer, but this is the easiest way for Plone integration tests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>propia capa, pero esta es la manera más fácil para pruebas de integración Plone.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># Load the ZCML configuration for the example.tests package.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># Ejecute la configuración ZCML para el paquete example.tests</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># This can of course use &lt;include /&gt; to include other packages.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># Esto obviamente puede usar &lt;include /&gt; para incluir otros paquetes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># We need to tell the testing framework that these products</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># Hay que decirle al framework de pruebas de que estos productos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># should be available.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># deberían estar disponibles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This can't happen until after we have loaded</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto no puede ocurrir hasta después de haber cargado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># the ZCML.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># el ZCML.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus, we do it here.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por lo tanto, lo hacemos aquí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note the use of installPackage() instead</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>observe el uso de installPackage() en vez</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># of installProduct().</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># de installProduct().</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># This is *only* necessary for packages outside the Products.* namespace</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># Esto es necesario *sólo* para paquetes fuera del espacio de nombres de Productos .*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># which are also declared as Zope 2 products, using</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># los cuales también son declarados como productos Zope 2, usando</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># We may also need to load dependencies, e.g.:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># También puede ser necesario cargar dependencias, por ejemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># The order here is important: We first call the (deferred) function which
# installs the products we need for this product.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># # El orden aquí es importante: En primer lugar llama la función (diferida) que
# instala los productos que necesita para este producto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Then, we let PloneTestCase 
# set up this product on installation.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Luego dejamos PloneTestCase 
# configure este producto en la instalación.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;We use this base class for all the tests in this package.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Usamos esta clase base para todas las pruebas en este paquete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If necessary,</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si es necesario,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>we can put common utility or setup code in here.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>podemos poner utilidad común o el código del setup aquí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This applies to unit</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto se aplica a casos de</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>test cases.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>prueba unitaria</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;We use this class for functional integration tests that use doctest</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Usamos esta clase para pruebas de integración funcional que usen doctestç</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>syntax.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>sintaxis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Again, we can put basic common utility or setup code in here.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Una vez más podemos poner utilidad común o el código del setup aquí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice how we can explicitly install third party products (and egg-based packages which use product semantics) and then tell PloneTestCase to quick-install these into the test fixture site.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Observe cómo podemos instalar de forma explícita productos de terceros (y paquetes base-huevo que utilizan la semántica del producto) y luego decirle a PloneTestCase hacer una rápida instalación de estos en el sitio de prueba fixture.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The test runner will <bpt i='0' x='0'>&lt;e0&gt;</bpt>not<ept i='0'>&lt;/e0&gt;</ept> automatically load all products in the <bpt i='1' x='1'>&lt;s1&gt;</bpt>Products.*<ept i='1'>&lt;/s1&gt;</ept> namespace, nor will it execute ZCML for packages outside <bpt i='2' x='2'>&lt;s2&gt;</bpt>Products.*<ept i='2'>&lt;/s2&gt;</ept> automatically.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El runner de prueba <bpt i='0' x='0'>&lt;e0&gt;</bpt>no<ept i='0'>&lt;/e0&gt;</ept> cargará automáticamente todos los productos en el namespace de <bpt i='1' x='1'>&lt;s1&gt;</bpt>Products.*<ept i='1'>&lt;/s1&gt;</ept>, y tampoco ejecutará el ZCML para paquetes fuera de <bpt i='2' x='2'>&lt;s2&gt;</bpt>Products.*<ept i='2'>&lt;/s2&gt;</ept> automáticamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The test class which uses this environment is found in <bpt i='0' x='0'>&lt;s0&gt;</bpt>tests/test_integration_unit.py<ept i='0'>&lt;/s0&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La clase de prueba que usa el entorno se puede encontrar en <bpt i='0' x='0'>&lt;s0&gt;</bpt>tests/test_integration_unit.py<ept i='0'>&lt;/s0&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;This is an integration &quot;unit&quot; test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Esta es una prueba &quot;unitaria&quot; de integración.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It uses PloneTestCase, but does not
use doctest syntax.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usa PloneTestCase, pero no usa la sintaxis doctest.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You will find lots of examples of this type of test in CMFPlone/tests, for 
example.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Encontrará varios ejemplos de este tipo en CMFPlone/tests, por ejemplo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;The name of the class should be meaningful.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;El nombre de la clase debería significar algo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This may be a class that</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto puede ser una clase que</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>tests the installation of a particular product.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>pruebe la instalación de un producto en particular.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;This method is called before each single test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Este método es llamado antes de cada prueba individual.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It can be used to</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Puede ser utilizado para</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>set up common state.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>establecer el estado común.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Setup that is specific to a particular test</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Configuración que sea específica para una determinada prueba</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>should be done in that test method.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>debería hacerse con ese método.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;This method is called after each single test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Este método es llamado después de cada prueba individual.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It can be used for</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Puede ser utilizado para</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>cleanup, if you need it.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>limpieza, si usted lo necesita.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that the test framework will roll back</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Tenga en cuenta que el framework deshará</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>the Zope transaction at the end of each test, so tests are generally</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>la transacción Zope al final de cada prueba, así que las pruebas son en general</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>independent of one another.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>independiente de unas a otras.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, if you are modifying external</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Sin embargo, si usted está modificando recursos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>resources (say a database) or globals (such as registering a new</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>externos (digamos una base de datos) o globales (tal como registrar u nuevo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>adapter in the Component Architecture during a test), you may want to</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>adaptador en la Component Architecture durante una prueba), tal vez quiera</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>tear things down here.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>usar un tear-down (desmontaje) aquí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># This is a simple test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># Esta es una prueba sencilla.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The method needs to start with the name</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El método tiene que empezar con el nombre</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># Look at the Python unittest documentation to learn more about hte</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>#Revise la documentación de Python para pruebas unitarias para aprender más sobre los</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># kinds of assertion methods which are available.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># tipos de métodos de afirmaciones disponibles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># PloneTestCase has some methods and attributes to help with Plone.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># PloneTestCase tiene algunos métodos y atributos para ayudar con Plone.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># Look at the PloneTestCase documentation, but briefly:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># Observe la documentación PloneTestCase, pero en pocas palabras:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>#   - self.portal is the portal root</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>#   - self.portal es el root de portal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>#   - self.folder is the current user's folder</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>#   - self.folder es la carpeta del usuario actual</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>#   - self.logout() &quot;logs out&quot; so that the user is Anonymous</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>#   - self.logout() &quot;cierra sesión&quot; y el usuario entonces es Anónimo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>#   - self.setRoles(['Manager', 'Member']) adjusts the roles of the current user</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>#   - self.setRoles(['Manager', 'Member']) ajusta los role del usuario actual</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># Keep adding methods here, or break it into multiple classes or</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># Mantenga la adición de métodos aquí, o divida en varias clases o</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># multiple files as appropriate.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># archivos múltiples, según corresponda.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Having tests in multiple files makes</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Tener pruebas en múltiples archivos hace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># it possible to run tests from just one package:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># hace posible la ejecución de pruebas desde un solo paquete:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;This sets up a test suite that actually runs the tests in the class</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Esto establece un conjunto de pruebas que ejecuta las pruebas en la clase</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>above</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>anterior</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, we have a test suite with one test class - we could have added more classes if necessary.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Aquí tenemos un conjunto de pruebas con una clase de prueba; pudimos haber añadido más clases si es necesario.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i='0' x='0'>&lt;s0&gt;</bpt>afterSetUp()<ept i='0'>&lt;/s0&gt;</ept> and <bpt i='1' x='1'>&lt;s1&gt;</bpt>beforeTearDown()<ept i='1'>&lt;/s1&gt;</ept> methods - if present - are called immediately before and after each test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Los métodos <bpt i='0' x='0'>&lt;s0&gt;</bpt>afterSetUp()<ept i='0'>&lt;/s0&gt;</ept> y <bpt i='1' x='1'>&lt;s1&gt;</bpt>beforeTearDown()<ept i='1'>&lt;/s1&gt;</ept>, si están presentes, son llamados inmediatamente antes y después de cada prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After a test is run, the transaction is rolled back, causing tests to run in isolation.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Después de que una prueba se ejecuta, la transacción se regresa, causando que pruebas se ejecuten de forma aislada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You only really need explicit teardown if your tests make permantent changes that are not covered by the ZODB transaction machinery.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Sólo se necesita realmente un teardown (desmontaje) explícito si sus pruebas hacen cambios permanentes que no están cubiertos por el mecanismo de transacción de la ZODB.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You are free to add whatever helper methods you wish to your unit test class, but any method with a name starting with <bpt i='0' x='0'>&lt;s0&gt;</bpt>test<ept i='0'>&lt;/s0&gt;</ept> will be executed as a test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usted es libre de añadir cualquiera de los métodos de ayuda que desee para su clase de prueba unitaria, pero cualquier método con un nombre que comience con <bpt i='0' x='0'>&lt;s0&gt;</bpt>test<ept i='0'>&lt;/s0&gt;</ept> se ejecutará como una prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Tests are usually written to be as concise (not to be confused with &quot;obfuscated&quot;) as possible.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Las pruebas suelen ser escritas para ser lo más conciso (no confundir con &quot;ofuscado&quot;) posible.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice the calls to methods like <bpt i='0' x='0'>&lt;s0&gt;</bpt>self.assertEqual()<ept i='0'>&lt;/s0&gt;</ept> or <bpt i='1' x='1'>&lt;s1&gt;</bpt>self.failUnless()<ept i='1'>&lt;/s1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Vea las llamadas a los métodos como <bpt i='0' x='0'>&lt;s0&gt;</bpt>self.assertEqual()<ept i='0'>&lt;/s0&gt;</ept> o <bpt i='1' x='1'>&lt;s1&gt;</bpt>self.failUnless()<ept i='1'>&lt;/s1&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These are the assertion methods that do the actual testing.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Estos son los métodos de afirmación que hace realmente la prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If any of these fail, that test is counted as a failure and you'll get an ugly F in your test output.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si alguno de ellos falla, esa prueba se cuenta como una falla, y obtendrá un horrible F la salida de su prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To run the test, we would do:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Para ejecutar la prueba, haríamos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is actually more output than this, as PloneTestCase installs a number of products and processes ZCML.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En realidad, hay más salida que ésta, ya que PloneTestCase instala una serie de productos y procesos ZCML.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Rules of thumb</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Reglas generales</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are some basic rules of thumb for writing unit tests with PloneTestCase you should be aware of:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Hay algunas reglas básicas para escribir las pruebas unitarias con PloneTestCase que debería tener en cuenta :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Write test first, don't put it off, and don't be lazy (did we say this enough already?)</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Escriba la prueba primero; no sea perezoso y no aplace esto (¿ya no lo hemos dicho lo suficiente?)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Write one test (i.e. one method) for each thing you want to test</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Escriba una prueba (esto es, un método) para cada cosa que desea probar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Keep related tests together (i.e. in the same test case class)</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Mantenga las pruebas que se asemejen juntas (es decir, en la misma clase de caso de prueba)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Be pragmatic.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Sea pragmático.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you want to test every combination of inputs and outputs you will probably go blue in the face, and the additional tests are unlikely to be of much value.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si desea probar cada combinación de entradas y salidas probablemente su cara se tornará morada, y las pruebas adicionales son poco probables que sean de mucho valor. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Similarly, if a method is complicated, don't just test the basic case.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Del mismo modo, si un método es complicado, no pruebe solamente el caso básico.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This comes with experience, but in general, you should test common cases, edge cases and preferably cases in which the method or component is expected to fail (i.e. test that it fails as expected - you still shouldn't get any F's in your test output!).</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto viene con la experiencia, pero en general, debe probar los casos más comunes, los casos extremos y preferiblemente los casos en que se espera que el método o componente falle (es decir, prueba que falle como es esperado; aun así ¡no debería conseguir ninguna F en la salida de su prueba!).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Keep tests simple.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Haga las pruebas sencillas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Don't try to be clever, don't over-generalise.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>No trate de ser demasiado astuto, y no generalice.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When a test fails, you need to easily determine whether it is because the test itself is wrong, or the thing it is testing has a bug.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Cuando falla una prueba, es necesario determinar con facilidad si se debe a que la prueba en sí está mala, o si aquello que está analizando tiene un error.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Assertion and utility methods in the unit testing framework</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Métodos de utilidad y afirmación en el framework de pruebas unitarias</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are quite a few assertion methods, most of which do basically the same thing - check if something is True or False.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Hay un considerable número de métodos de afirmación, y la mayoría hacen básicamente lo mismo. Comprobar si es algo es verdadero o falso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Having a variety of names allows you to make your tests read the way you want.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Tener una variedad de nombres le permite hacer sus pruebas de lectura de la manera que desee.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The list of assertion methods can be found in the Python documentation for <bpt i='0' x='0'>&lt;s0&gt;</bpt>unittest.TestCase<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La lista de métodos de afirmación se puede encontrar en la documentación de Python para <bpt i='0' x='0'>&lt;s0&gt;</bpt> unittest.TestCase <ept i='0'>&lt;/s0&gt;</ept> .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The most common ones are:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Los más comunes son:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Ensure expr is true</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Asegura que expr es verdadero</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Ensure expr1 is equal to expr2</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Asegura que expr1 sea igual a expr2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Make sure exception is raised by the callable.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Asegura que la excepction (excepción) es levantada por callable.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that callable here should be the name of a method or callable object, not an actual call, so you write e.g. <bpt i='0' x='0'>&lt;s0&gt;</bpt>self.assertRaises(AttributeError, myObject.myMethod, someParameter)<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Tenga en cuenta que callable aquí debe ser el nombre de un método o un objeto callable (que se puede llamar), no una llamada como tal, por lo que se escribe por ejemplo, <bpt i='0' x='0'>&lt;s0&gt;</bpt>self.assertRaises(AttributeError, myObject.myMethod, someParameter)<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note lack of () after <bpt i='1' x='1'>&lt;s1&gt;</bpt>myMethod<ept i='1'>&lt;/s1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Note la falta de () después de <bpt i='1' x='1'>&lt;s1&gt;</bpt>myMethod<ept i='1'>&lt;/s1&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you included it, you'd get the exception raised in your test method, which is probably not what you want.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si lo incluye, obtendría la excepción arrojada en su método de prueba, que probablemente no es lo que usted quiere.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, the statement above will cause the unit testing framework to call <bpt i='2' x='2'>&lt;s2&gt;</bpt>myMethod(someParameter)<ept i='2'>&lt;/s2&gt;</ept> (you can pass along any parameters you want after the calalble) and check for an <bpt i='3' x='3'>&lt;s3&gt;</bpt>AttributeError<ept i='3'>&lt;/s3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En vez de eso, la sentencia anterior causará que el framework de pruebas unitarias llame <bpt i='2' x='2'>&lt;s2&gt;</bpt>myMethod(someParameter)<ept i='2'>&lt;/s2&gt;</ept> (puede pasar a lo largo de cualquier parámetro que desee después del callable) y revise por un <bpt i='3' x='3'>&lt;s3&gt;</bpt>AttributeError<ept i='3'>&lt;/s3&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Simply fail.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Falla simple.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is useful if a test has not yet been completed, or in an if statement inside a test where you know the test has failed.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto es útil si una prueba aún no se ha completado, o en una sentencia &quot;if&quot; dentro de una prueba donde sabe que la prueba ha fallado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition to the unit testing framework assertion methods, ZopeTestCase and PloneTestCase include some helper methods and variables to help you interact with Zope.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Además de los métodos de afirmación para el framework de pruebas unitarias, ZopeTestCase y PloneTestCase incluyen algunos métodos de ayuda y variables que le ayudarán a interactuar con Zope.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It's instructive to read the source code for these two products, but briefly, the key variables you can use in unit tests are:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Es instructivo leer el código fuente de estos dos productos, pero brevemente, las principales variables que puede utilizar en las pruebas unitarias son:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Plone portal the test is executing in</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El portal de Plone que la prueba está ejecutando</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The member folder of the member you are executing as</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La carpeta de miembro del miembro que usted está ejecutando</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And the key methods are:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Y los métodos claves son:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Log out, i.e. become anonymous</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Cerrar sesión, es decir, convertirse en usuario anónimo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Log in again.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Iniciar sesión nuevamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass a username to log in as a different user.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Pasar un nombre de usuario para acceder al sistema como un usuario diferente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pass in a list of roles you want to have.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Aprobar una lista de funciones que desee tener.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, self.setRoles(('Manager',)) lets you be manager for a while.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por ejemplo, self.setRoles(('Manager',)) le permite ser el administrador por un tiempo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>How nice.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Genial!!!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Similarly, grant a number of permissions to the current user in <bpt i='0' x='0'>&lt;s0&gt;</bpt>self.folder<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Igualmente, garantizar un serie de permisos al usuario actual en <bpt i='0' x='0'>&lt;s0&gt;</bpt>self.folder<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Set which groups the test user is in.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Establece en que grupos está el usuario de prueba</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Tips &amp; Tricks</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Consejos y trucos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Good unit testing comes with experience.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Buena pruebas unitarias vienen con la experiencia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It's always useful to read the unit tests of code with which you are fairly familiar, to see how other people unit test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Siempre es útil leer las pruebas unitarias de código con las que usted está más familiarizado, para ver cómo otras personas hacen pruebas unitarias.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We'll cover a few hints here to get you thinking about how you approach your own tests:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Vamos a cubrir algunas pistas aquí para empezar a pensar acerca de cómo enfocar sus propias pruebas:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Don't be timid!</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>¡No sea tímido!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Python, being a dynamic scripting language, lets you do all kinds of crazy things.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Python, al ser un lenguaje de programación dinámico, le permite hacer todo tipo de locuras.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can rip a function right out from the Plone core and replace it with your own implementation in afterSetUp() or a test if that serves your testing purposes.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usted puede sacar una función fuera del core de Plone y reemplazarla con su propia implementación en afterSetUp() o una prueba si eso cumple con sus propósitos de prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Similarly, replacing things like the <bpt i='0' x='0'>&lt;s0&gt;</bpt>MailHost<ept i='0'>&lt;/s0&gt;</ept> with dummy implementations may be the only way to test certain features.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Igualmente remplazar cosas como el <bpt i='0' x='0'>&lt;s0&gt;</bpt>MailHost<ept i='0'>&lt;/s0&gt;</ept> con dummy implementations (implementaciones simuladas) tal vez sea la única forma de probar ciertas características.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Look at <bpt i='1' x='1'>&lt;s1&gt;</bpt>CMFPlone/tests/dummy.py<ept i='1'>&lt;/s1&gt;</ept> for some examples of dummy objects.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Observe <bpt i='1' x='1'>&lt;s1&gt;</bpt>CMFPlone/tests/dummy.py<ept i='1'>&lt;/s1&gt;</ept> para algunos ejemplos de objetos dummy. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use tests to try things out.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Utilice pruebas para probar las cosas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They are a safe environment.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Se tratan de un entorno seguro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need to try something a bit out of the ordinary, writing them in a test is often the easiest way of seeing how something works.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si usted necesita probar algo un poco fuera de lo común, escribirlos en una prueba a menudo es la manera más fácil de ver cómo funciona algo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>During debugging, you can insert print statements in tests to get traces in your terminal when you execute the tests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Durante la depuración, puede insertar impresión de sentencias en las pruebas para obtener rastros en su terminal al ejecutar las pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Don't check in code with printing tests, though.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Sin embargo, no compruebe el código con impresión de sentencias.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Similarly, the python debugger is very valuable inside tests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Del mismo modo, el depurador de Python es muy valioso dentro de pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Putting <bpt i='0' x='0'>&lt;s0&gt;</bpt>import pdb; pdb.set_trace()<ept i='0'>&lt;/s0&gt;</ept> inside your test methods lets you step through testing code and step into the code it calls.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Colocar <bpt i='0' x='0'>&lt;s0&gt;</bpt>import pdb; pdb.set_trace()<ept i='0'>&lt;/s0&gt;</ept> dentro de los métodos de prueba le permite desplazarse por el código de prueba y entrar en el código que este llama.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you're not familiar with the python debugger, your life is incomplete.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si usted no está familiarizado con el depurador de Python, su vida está incompleta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i='1' x='1'>&lt;a1&gt;</bpt>More about using pdb with Plone<ept i='1'>&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg><bpt i='1' x='1'>&lt;a1&gt;</bpt>Más sobre el uso de pdb con Plone<ept i='1'>&lt;/a1&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Integration doctests using PloneTestCase</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Doctests de integración usando PloneTestCase</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The PloneTestCase integration test setup can also be used in doctests</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El setup de prueba de integración PloneTestCase también puede usarse en doctests</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The choice of test case classes over doctest is purely one of syntactic preference.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La elección de clases de caso de prueba sobre doctest es puramente de preferencias sintácticas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can use the test setup from the previous section (in <bpt i='0' x='0'>&lt;s0&gt;</bpt>base.py<ept i='0'>&lt;/s0&gt;</ept>) in a doctest as well.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Podemos utilizar el setup de prueba de la sección anterior (en <bpt i='0' x='0'>&lt;s0&gt;</bpt>base.py<ept i='0'>&lt;/s0&gt;</ept>) también en un doctest.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This type of test is more useful for documenting the integration of your code with Zope/Plone in a narrative fashion.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Este tipo de prueba es más útil para la documentar la integración de su código con Zope/Plone en una narrativa elegante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is no change to <bpt i='0' x='0'>&lt;s0&gt;</bpt>tests/base.py<ept i='0'>&lt;/s0&gt;</ept> for this type of setup.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>No hay ningún cambio a <bpt i='0' x='0'>&lt;s0&gt;</bpt>tests/base.py<ept i='0'>&lt;/s0&gt;</ept> para este tipo de setup (configuración)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, we must be careful to use a test class that derives from <bpt i='1' x='1'>&lt;s1&gt;</bpt>FunctionalTestCase<ept i='1'>&lt;/s1&gt;</ept>, since this performs the initialisation necessary for doctests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Sin embargo, debemos tener cuidado de utilizar una clase de prueba que se deriva de <bpt i='1' x='1'>&lt;s1&gt;</bpt>FunctionalTestCase<ept i='1'>&lt;/s1&gt;</ept>, ya que realiza la inicialización necesaria para doctests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The test setup is found in <bpt i='2' x='2'>&lt;s2&gt;</bpt>tests/test_integration_doctest.py<ept i='2'>&lt;/s2&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El setup de prueba se encuentra en <bpt i='2' x='2'>&lt;s2&gt;</bpt>tests/test_integration_doctest.py<ept i='2'>&lt;/s2&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;This is an integration doctest test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Esta es una prueba de doctest de integración.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It uses PloneTestCase and doctest
syntax.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Se usa PloneTestCase y sintaxis doctest.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># Here, we create a test suite passing the name of a file relative</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># Aquí creamos un conjunto de pruebas que pasa el nombre de un pariente archivo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># to the package home, the name of the package, and the test base</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># A la casa del paquete, el nombre del paquete, y la clase de base de prueba</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># class to use.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># a usar.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, the base class is a full PloneTestCase, which</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Aquí la clase de base es un completo PloneTestCase, lo cual</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># means that we get a full Plone site set up.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># significa que obtenemos una configuración de sitio Plone completa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># The actual test is in integration.txt</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># La prueba como tal está en integration.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># We could add more doctest files here as well, by copying the file</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># Podríamos añadir más archivos doctest aquí también, mediante la copia del archivo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># block above.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># de bloque anterior.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, we set <bpt i='0' x='0'>&lt;s0&gt;</bpt>ExampleFunctionalTestCase<ept i='0'>&lt;/s0&gt;</ept> from <bpt i='1' x='1'>&lt;s1&gt;</bpt>base.py<ept i='1'>&lt;/s1&gt;</ept> as the <bpt i='2' x='2'>&lt;s2&gt;</bpt>test_class<ept i='2'>&lt;/s2&gt;</ept>, which means that <bpt i='3' x='3'>&lt;s3&gt;</bpt>self<ept i='3'>&lt;/s3&gt;</ept> in the doctest will be the same as <bpt i='4' x='4'>&lt;s4&gt;</bpt>self<ept i='4'>&lt;/s4&gt;</ept> in the test class we saw in the previous section.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Aquí definimos <bpt i='0' x='0'>&lt;s0&gt;</bpt>ExampleFunctionalTestCase<ept i='0'>&lt;/s0&gt;</ept> desde <bpt i='1' x='1'>&lt;s1&gt;</bpt>base.py<ept i='1'>&lt;/s1&gt;</ept> como la <bpt i='2' x='2'>&lt;s2&gt;</bpt>test_class<ept i='2'>&lt;/s2&gt;</ept>, lo que significa que el <bpt i='3' x='3'>&lt;s3&gt;</bpt>self<ept i='3'>&lt;/s3&gt;</ept> será el mismo que el <bpt i='4' x='4'>&lt;s4&gt;</bpt>self<ept i='4'>&lt;/s4&gt;</ept> en la clase de prueba que observamos en la sección anterior.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, we can access variables such as <bpt i='5' x='5'>&lt;s5&gt;</bpt>self.portal<ept i='5'>&lt;/s5&gt;</ept> and <bpt i='6' x='6'>&lt;s6&gt;</bpt>self.folder<ept i='6'>&lt;/s6&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En particular, podemos acceder a variables tales como <bpt i='5' x='5'>&lt;s5&gt;</bpt>self.portal<ept i='5'>&lt;/s5&gt;</ept> y <bpt i='6' x='6'>&lt;s6&gt;</bpt>self.folder<ept i='6'>&lt;/s6&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We also set some common doctest option flags - reporting only the first failure (to avoid overly long error output when an example early on in the doctest fails), normalising whitespace (so that we can use newlines freely) and allowing the ellipsis operator everywhere (as opposed to having to turn it on each time we want to use it).</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>También establecemos algunas banderas (flags) de opciones de doctest; reportando sólo la primera falla (para evitar la salida de error demasiado larga cuando un ejemplo previo en el doctest falla),  normalizando espacios en blanco (para que podamos utilizar libremente nuevas líneas) y permitiendo el operador de puntos suspensivos en todas partes (en lugar de tener que activarlo cada vez que queramos usarlo).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Look at the <bpt i='7' x='7'>&lt;s7&gt;</bpt>doctest<ept i='7'>&lt;/s7&gt;</ept> module documentation for more information.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Revise la documentación del módulo <bpt i='7' x='7'>&lt;s7&gt;</bpt>doctest<ept i='7'>&lt;/s7&gt;</ept> para más información.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The test itself, in <bpt i='0' x='0'>&lt;s0&gt;</bpt>tests/integration.txt<ept i='0'>&lt;/s0&gt;</ept>, is written much like the other doctests we have seen:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La prueba en sí que se encuentra en <bpt i='0' x='0'>&lt;s0&gt;</bpt>tests/integration.txt<ept i='0'>&lt;/s0&gt;</ept>, está escrita muy parecida a los otros doctest que hemos visto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>======================
An integration doctest
======================

This test is an integration test that uses PloneTestCase.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>======================
Un doctest de integración
======================

Esta es una prueba de doctest de integración que usa PloneTestCase.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, 'self' is
the test class, so we can use 'self.folder', 'self.portal' and so on.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En este caso 'self' es
la clase de prueba, para poder usar 'self.folder', 'self.portal', etc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The
setup is done in teststest_integration_doctest.py

Being a doctest, we can tell a story here.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El
setup se hace en teststest_integration_doctest.py

Al ser un doctest, podemos contar una historia aquí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, let's say a user had a dying wish: to add a news item.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por ejemplo, supongamos que un usuario tiene una última voluntad: añadir una noticia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We'll do
that using the standard Plone API.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Lo haremos
usando API estándar de Plone</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That's great, but really, he wanted to add it to the portal root:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Eso está muy bien, pero en realidad, él quería añadirla al root del portal:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unauthorized: Cannot create News Item

Whoops!</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Unauthorized: Cannot create News Item

¡Ooops!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Too bad!</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>¡Que mal!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>At least we got to demonstrate the ellipsis operator, which
matches arbitrary text.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Al menos demostramos el operador (ellipsis) de puntos suspensivos, 
que combina texto arbitrario.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We enabled this in test_integration_doctest.py.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto lo habilitamos en test_integration_doctest.py.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It
is also possible to enable (or disable) this flag on a single statement.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>También
es posible habilitar (o deshabilitar) esta bandera en una sola sentencia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See the Python doctest documentation for more information.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Consulte la documentación de doctest de Python para más información.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To run this test on its own, we would do:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Para ejecutar esta prueba por sí misma, haríamos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Again, we have cut out some of the output from PloneTestCase.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Una vez más, hemos cortado parte de la salida de PloneTestCase.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Functional and system tests with zope.testbrowser</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Pruebas funcionales y de sistema con zope.testbrowser</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Whilst unit tests and doctests verify the correctness of individual methods and modules, functional tests test portions of the application as a whole, often from the point of view of the user, and typically aligned with use cases.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Mientras que las pruebas unitarias y doctests verifican la exactitud de métodos individuales y módulos, las pruebas funcionales prueban porciones de aplicación como un todo, a menudo desde el punto de vista del usuario, y por lo general en consonancia con los casos de uso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>System tests, in comparison, test the entire application as a black box.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Las pruebas de sistema, en comparación, prueban toda la aplicación como una caja negra.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No developer likes to click around the browser to check if that button that was only supposed to show up in some cases really did show up.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>A ningún desarrollador le gusta hacer clic por el explorador para comprobar si ese botón que se suponía iba a aparecer sólo en algunos casos realmente se apareció.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unfortunately, these are also the types of problems that most often suffer from regressions, because templates are difficult (and slow) to test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Desgraciadamente estos son también los tipos de problemas que con mayor frecuencia sufren regresiones, porque las plantillas son difíciles (y lentas) para poner a prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Zope 3 has an elegant library called <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.testbrowser<ept i='0'>&lt;/s0&gt;</ept> which lets you write doctests that behave like a real web browser (almost... it cannot yet handle JavaScript, which means that testing dynamic UIs that depend on JavaScript is not possible, although <bpt i='1' x='1'>&lt;a1&gt;</bpt>Selenium <ept i='1'>&lt;/a1&gt;</ept>may be a viable alternative here).</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Zope 3 tiene una librería elegante llamada <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.testbrowser<ept i='0'>&lt;/s0&gt;</ept> que le permite escribir doctests que se comporten como un navegador Web real (casi...pues no se puede manejar JavaScript, lo que significa que pruebas de interfaz de usuario dinámica que depende de JavaScript no es posible, sin embargo <bpt i='1' x='1'>&lt;a1&gt;</bpt>Selenium<ept i='1'>&lt;/a1&gt;</ept>  podría ser una alternativa valida aquí).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can open URLs, click links, fill in form fields and test the HTTP headers, URLs and page contents that are returned from Plone.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usted puede abrir direcciones URL, hacer clics en enlaces, rellenar campos de formulario y hacer pruebas de las cabeceras HTTP, URL y contenidos de página que son devueltos desde Plone.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In fact, you could test any website, not just Zope or Plone ones.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>De hecho, usted podría poner a prueba cualquier sitio web, no sólo los de Zope o Plone.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Functional tests are no replacement for unit tests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Las pruebas funcionales no son reemplazos de las pruebas unitarias.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They test a slice of functionality, typically as the user sees it.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Estas prueban un trozo de la funcionalidad, por lo general como el usuario la ve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus, they may not systematically include every aspect of the application.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por lo tanto, no pueden incluir sistemáticamente todos los aspectos de la aplicación.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, a functional test may check whether a &quot;Delete&quot; button is present, and even that it works as expected, but should not be used to exhaustively test whether the delete operation works in every possible edge case.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por ejemplo, una prueba funcional puede comprobar si un botón &quot;Eliminar&quot; está presente, e incluso si funciona como es esperado, pero no debe ser utilizado para probar de forma exhaustiva si la operación de eliminación funciona en todos los casos posibles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Where they excel, however, is in testing things like which options appear to which users depending on roles and permissions, or simply to exercise all the various templates used in a given product to make sure they don't break.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Donde se destacan, sin embargo, es en las pruebas de cosas como que opciones aparecen a que usuarios en función de roles y permisos, o simplemente ejercitar todas las plantillas diversas utilizadas en un determinado producto para asegurarse de que no fallen.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here is an example from the <bpt i='0' x='0'>&lt;s0&gt;</bpt>example.tests<ept i='0'>&lt;/s0&gt;</ept> package.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Aquí hay un ejemplo del paquete <bpt i='0' x='0'>&lt;s0&gt;</bpt>example.tests<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The test setup is in <bpt i='1' x='1'>&lt;s1&gt;</bpt>tests/test_functional_doctest.py<ept i='1'>&lt;/s1&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El setup de prueba está en <bpt i='1' x='1'>&lt;s1&gt;</bpt>tests/test_functional_doctest.py<ept i='1'>&lt;/s1&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&quot;&quot;&quot;This is a a functional doctest test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&quot;&quot;&quot;Esta es una prueba de doctest funcional</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the test itself, we use zope.testbrowser to test end-to-end
functionality, including the UI.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En la prueba como tal, usamos zope.testbrowser para probar funcionalidades de extremo a extremo, incluyendo la UI (interfaz de usuario)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One important thing to note: zope.testbrowser is not JavaScript aware!</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Una cosa importante a tener en cuenta: ¡zope.testbrowser no es percibe JavaScript!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For
that, you need a real browser.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Para
eso, necesita un explorador real.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Look at zope.testbrowser.real and Selenium
if you require &quot;real&quot; browser testing.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Revise zope.testbrowser.real y Selenium
si requiere hacer pruebas reales con un explorador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># The actual test is in functional.txt</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># La prueba como tal esta en functional.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This code is actually identical to the test setup for the integration doctest in the previous section.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Este código es en realidad idéntico al setup de prueba para la doctest de integración en la sección anterior.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The differences are found in the actual test itself, which uses <bpt i='0' x='0'>&lt;s0&gt;</bpt>Products.Five.testbrowser.Browser<ept i='0'>&lt;/s0&gt;</ept>, a Zope 2 compatability wrapper around <bpt i='1' x='1'>&lt;s1&gt;</bpt>zope.testbrowser.Browser<ept i='1'>&lt;/s1&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Las diferencias se encuentran en la prueba misma, que usa <bpt i='0' x='0'>&lt;s0&gt;</bpt>Products.Five.testbrowser.Browser<ept i='0'>&lt;/s0&gt;</ept>, una compatibilidad Zope 2  empaquetado alrededor de <bpt i='1' x='1'>&lt;s1&gt;</bpt>zope.testbrowser.Browser<ept i='1'>&lt;/s1&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>====================
A functional doctest
====================

This is a full-blown functional test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>====================
Un doctest funcional
====================

Esta es una prueba funcional completa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The emphasis here is on testing what
the user may input and see, and the system is largely tested as a black box.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Aquí el énfasis se encuentra en probar lo que
el usuario puede introducir y  ver, y el sistema es en gran parte a probado como una caja negra.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We use PloneTestCase to set up this test as well, so we have a full Plone site
to play with.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Utilizamos PloneTestCase para comprobar esta prueba, y así tener un sitio completo de Plone
para jugar con él.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We *can* inspect the state of the portal, e.g. using 
self.portal and self.folder, but it is often frowned upon since you are not
treating the system as a black box.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Nosotros *podemos* inspeccionar el estado del portal por ejemplo usando
self.portal y self.folder, pero generalmente no es bien visto ya que usted no está
tratando el sistema como una caja negra.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Also, if you, for example, log in or set
roles using calls like self.setRoles(), these are not reflected in the test
browser, which runs as a separate session.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Además si usted por ejemplo inicia sesión o define
roles usando llamadas como self.setRoles(), estas no se reflejan en la navegador
de prueba, el cual se ejecuta como una sesión independiente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Being a doctest, we can tell a story here.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Al ser un doctest, podemos contar una historia aquí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First, we must perform some setup.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En primer lugar, hay que realizar alguna configuración.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We use the testbrowser that is shipped
with Five, as this provides proper Zope 2 integration.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usamos el testbrowser que se suministra con
Five, ya que este proporciona adecuada integración de Zope 2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Most of the 
documentation, though, is in the underlying zope.testbrower package.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Sin embargo, la mayoría de la 
documentación,  se encuentra en el paquete subyacente zope.testbrower.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&gt;&gt;&gt; portal_url = self.portal.absolute_url()

The following is useful when writing and debugging testbrowser tests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&gt;&gt;&gt; portal_url = self.portal.absolute_url()

Lo siguiente es útil para escribir y depurar las pruebas testbrowser.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It lets
us see all error messages in the error_log.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Nos permite
usar todos los mensajes de errores en el error_log.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&gt;&gt;&gt; self.portal.error_log._ignored_exceptions = ()

With that in place, we can go to the portal front page and log in.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&gt;&gt;&gt; self.portal.error_log._ignored_exceptions = ()

Con eso en su lugar, podemos ir a la página principal del portal y entrar (iniciar sesión)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We will
do this using the default user from PloneTestCase:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Haremos esto
utilizando el usuario por defecto de PloneTestCase:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&gt;&gt;&gt; browser.open(portal_url)

We have the login portlet, so let's use that.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&gt;&gt;&gt; browser.open(portal_url)

Tenemos el portlet de inicio de sesión, así vamos a usarlo. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&gt;&gt;&gt; browser.getControl(name='submit').click()

Here, we set the value of the fields on the login form and then simulate a
submit click.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>&gt;&gt;&gt; browser.getControl(name='submit').click()

Aquí establecemos el valor de los campos en el formulario de inicio sesión y luego simular un
clic de un supuesto envío.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We then test that we are still on the portal front page:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Luego probamos si seguimos en la página principal del portal:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And we ensure that we get the friendly logged-in message:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Y nos aseguramos que obtenemos el mensaje amistoso para inicio de sesión.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>True

To learn more, look at the zope.testbrowser documentation and interfaces.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>True

Para aprender más, observe la documentación del paquete zope.testbrowser y sus interfaces.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are also a few examples of testbrowser tests in Plone itself.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>También hay algunos ejemplos de pruebas de testbrowser en Plone como tal.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All the action happens with the <bpt i='0' x='0'>&lt;s0&gt;</bpt>browser<ept i='0'>&lt;/s0&gt;</ept> object.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Toda la acción ocurre con el objeto <bpt i='0' x='0'>&lt;s0&gt;</bpt>browser<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This simulates a web browser (though as stated above, one that does not support JavaScript), and has a pleasant API for finding form controls and links and clicking on them.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Este simula un navegador Web (aunque como se ha dicho, uno que no soporta JavaScript), y tiene una API agradable para encontrar los controles de formulario y enlaces y acciones por clic sobre ellos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The variables <bpt i='1' x='1'>&lt;s1&gt;</bpt>browser.url<ept i='1'>&lt;/s1&gt;</ept> and <bpt i='2' x='2'>&lt;s2&gt;</bpt>browser.contents<ept i='2'>&lt;/s2&gt;</ept> represent what would've been in the URL bar and the rendered view of the page, respectively, and can be examined like any other variable.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Las variables <bpt i='1' x='1'>&lt;s1&gt;</bpt>browser.url<ept i='1'>&lt;/s1&gt;</ept> y <bpt i='2' x='2'>&lt;s2&gt;</bpt>browser.contents<ept i='2'>&lt;/s2&gt;</ept> representan lo que habría estado en la barra URL y la vista renderizada de la página respectivamente, y pueden ser examinadas como cualquier otra variable. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.testbrowser<ept i='0'>&lt;/s0&gt;</ept> has pretty comprehensive documentation in its <bpt i='1' x='1'>&lt;a1&gt;</bpt>README.txt<ept i='1'>&lt;/a1&gt;</ept> file - which is, of course, a runnable doctest.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg><bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.testbrowser<ept i='0'>&lt;/s0&gt;</ept> tiene documentación bastante completa en su archivo <bpt i='1' x='1'>&lt;a1&gt;</bpt>README.txt<ept i='1'>&lt;/a1&gt;</ept> - que es, por supuesto, una doctest ejecutable.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In brief, the most important methods of the <bpt i='2' x='2'>&lt;a2&gt;</bpt>IBrowser interface<ept i='2'>&lt;/a2&gt;</ept> (and thus the <bpt i='3' x='3'>&lt;s3&gt;</bpt>Browser<ept i='3'>&lt;/s3&gt;</ept> class) are:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En resumen, los métodos más importantes del <bpt i='2' x='2'>&lt;a2&gt;</bpt>IBrowser interface<ept i='2'>&lt;/a2&gt;</ept> (y por lo tanto de la clase <bpt i='3' x='3'>&lt;s3&gt;</bpt>Browser<ept i='3'>&lt;/s3&gt;</ept>) son:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Open a given URL.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Abrir una URL determinada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Reload the current page, much as the Refresh button in your browser would do.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Actualizar la página actual, tanto como en el botón de Actualizar o Recargar en el navegador haría.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Simulate pressing the Back button <bpt i='0' x='0'>&lt;s0&gt;</bpt>count<ept i='0'>&lt;/s0&gt;</ept> times.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Simular la acción del <bpt i='0' x='0'>&lt;s0&gt;</bpt>número<ept i='0'>&lt;/s0&gt;</ept> de veces por el botón Atrás o Retroceder.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Get an ILink (which you can then call <bpt i='0' x='0'>&lt;s0&gt;</bpt>click()<ept i='0'>&lt;/s0&gt;</ept> on), either by the text inside the &lt;a&gt; tags, by the URL in the <bpt i='1' x='1'>&lt;s1&gt;</bpt>href<ept i='1'>&lt;/s1&gt;</ept> attribute, or the <bpt i='2' x='2'>&lt;s2&gt;</bpt>id<ept i='2'>&lt;/s2&gt;</ept> of the link.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Obtener un ILink (el cual puede luego llamar para un <bpt i='0' x='0'>&lt;s0&gt;</bpt>click()<ept i='0'>&lt;/s0&gt;</ept>), ya sea por el texto dentro de la &lt;a&gt; etiqueta, por el URL en el <bpt i='1' x='1'>&lt;s1&gt;</bpt> atributo href<ept i='1'>&lt;/s1&gt;</ept>, o la <bpt i='2' x='2'>&lt;s2&gt;</bpt>id<ept i='2'>&lt;/s2&gt;</ept> del enlace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Get an <bpt i='0' x='0'>&lt;s0&gt;</bpt>IControl<ept i='0'>&lt;/s0&gt;</ept>, representing a form control, by label (either the value of a submit button or the contents of an associated <bpt i='1' x='1'>&lt;s1&gt;</bpt>&lt;label&gt;<ept i='1'>&lt;/s1&gt;</ept> tag) or form name.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Obtener un <bpt i='0' x='0'>&lt;s0&gt;</bpt>IControl<ept i='0'>&lt;/s0&gt;</ept>, representando un control de formulario, mediante una etiqueta (ya sea el valor de un botón de envío o el contenido de etiqueta <bpt i='1' x='1'>&lt;s1&gt;</bpt>&lt;label&gt;<ept i='1'>&lt;/s1&gt;</ept> asociada) o nombre del formulario.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The index argument is used to disambiguate if there is more than one control (e.g. <bpt i='2' x='2'>&lt;s2&gt;</bpt>index=0<ept i='2'>&lt;/s2&gt;</ept> gets the first one).</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El argumento index (índice) se utiliza para eliminar la ambigüedad de si hay más de un control  (ejemplo <bpt i='2' x='2'>&lt;s2&gt;</bpt>index=0<ept i='2'>&lt;/s2&gt;</ept> obtiene el primero.).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Again, you can call <bpt i='3' x='3'>&lt;s3&gt;</bpt>click()<ept i='3'>&lt;/s3&gt;</ept> on the control object to simulate clicking on it.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Una vez más, usted puede llamar un <bpt i='3' x='3'>&lt;s3&gt;</bpt>click()<ept i='3'>&lt;/s3&gt;</ept>en el objeto de control para simular las acciones por clic en él.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The IBrowser interface also provides some properties that can be used to examine the state of the current page.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La interfaz iBrowser también proporciona algunas propiedades que se pueden utilizar para examinar el estado de la página actual.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The most important ones are:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Las más importantes son:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The full URL to the current page.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La dirección URL completa de la página actual.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The full contents of the current page, as a string (usually containing HTML tags)</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Los contenidos completos de la página actual, como una cadena (por lo general contienen etiquetas HTML)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A dict of HTTP headers</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Un diccionario de los cabeceras HTTP</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please refer to the <bpt i='0' x='0'>&lt;a0&gt;</bpt>interfaces<ept i='0'>&lt;/a0&gt;</ept> and the <bpt i='1' x='1'>&lt;a1&gt;</bpt>README file<ept i='1'>&lt;/a1&gt;</ept> for details on the other methods and attributes, the interfaces for various types of links and controls, and further examples.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Por favor revise <bpt i='0' x='0'>&lt;a0&gt;</bpt>interfaces<ept i='0'>&lt;/a0&gt;</ept> y el <bpt i='1' x='1'>&lt;a1&gt;</bpt>archivo README<ept i='1'>&lt;/a1&gt;</ept> para más detalles sobre los otros métodos y atributos, las interfaces para distintos tipos de enlaces y controles, y más ejemplos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Debugging functional tests</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Depurando pruebas funcionales</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sometimes you will get errors from Zope resulting from some command executed using the testbrowser.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>A veces obtendrá errores de Zope provenientes de un comando ejecutado utilizando el testbrowser.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case, it can sometimes be difficult to know what the underlying cause is.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En este caso, a veces puede ser difícil saber cuál es la causa subyacente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Two debugging aids exist to make this a bit easier.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Dos ayudas de depuración existentes para hacer esto un poco más fácil.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First of all, make sure you see all errors in full by setting:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En primer lugar asegúrese de ver todos los errores:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i='0' x='0'>&lt;s0&gt;</bpt>handleErrors<ept i='0'>&lt;/s0&gt;</ept> is True (the default) you will get errors like <bpt i='1' x='1'>&lt;s1&gt;</bpt>HTTPError: HTTP Error 404: Not Found<ept i='1'>&lt;/s1&gt;</ept> or <bpt i='2' x='2'>&lt;s2&gt;</bpt>HTTPError: HTTP Error 500: Internal Server Error<ept i='2'>&lt;/s2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si <bpt i='0' x='0'>&lt;s0&gt;</bpt>handleErrors<ept i='0'>&lt;/s0&gt;</ept> es True (Verdadero, por defecto) obtendrá errores como <bpt i='1' x='1'>&lt;s1&gt;</bpt>HTTPError: HTTP Error 404: Not Found<ept i='1'>&lt;/s1&gt;</ept> o <bpt i='2' x='2'>&lt;s2&gt;</bpt>HTTPError: HTTP Error 500: Internal Server Error<ept i='2'>&lt;/s2&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Those are probably not very useful to you.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Probablemente esos no son muy útiles para usted.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Setting <bpt i='3' x='3'>&lt;s3&gt;</bpt>handleErrors<ept i='3'>&lt;/s3&gt;</ept> to False will show the full exceptions Zope (or possibly the HTML rendering of the error page, depending on the type of error).</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Ajustando <bpt i='3' x='3'>&lt;s3&gt;</bpt>handleErrors<ept i='3'>&lt;/s3&gt;</ept> a False  (falso) mostrará el Zope con las excepciones completa  (o posiblemente el HTML renderizando de la página de error, dependiendo del tipo de error).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Secondly, if you are using PloneTestCase, you can use Plone's error log.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En segundo lugar si está usando PloneTestCase, puede utilizar registro de error de Plone.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>At the top of the example, we do:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En la parte superior del ejemplo, podemos hacer:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This means that errors such as NotFound and Unauthorized will be shown in the error log.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto significa que errores como NotFound (no encontrado) y Unauthorized (no autorizado) se mostrarán en el registro de errores.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It may also be useful to enable Verbose Security in <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.conf<ept i='0'>&lt;/s0&gt;</ept> (see the comments in that file for details).</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>También puede ser útil activar la Seguridad Verbosa en <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.conf<ept i='0'>&lt;/s0&gt;</ept> (vea los comentarios en ese archivo para más detalles).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now, when a line appears that is throwing an error you can't debug, you can do:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Ahora cuando aparezca una línea que está lanzando un error que no se puede depurar, puede hacer lo siguiente:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This will print the most recent entry in the error log, and set a PDB break point.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto imprimirá la entrada más reciente en el registro de errores, y establece un punto de ruptura PDB.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using a real browser to render the results of your tests</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usando un navegador real para renderizar los resultados de sus pruebas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sometimes you would like to see the output of <bpt i='0' x='0'>&lt;c0&gt;</bpt>browser.contents<ept i='0'>&lt;/c0&gt;</ept> in a browser to easily debug what's happening in your functional tests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>A veces le gustaría ver la salida de <bpt i='0' x='0'>&lt;c0&gt;</bpt>browser.contents<ept i='0'>&lt;/c0&gt;</ept> en un navegador para depurar fácilmente lo que está sucediendo en las pruebas funcionales.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To do so, place a PDB break point in your tests as described above (<bpt i='1' x='1'>&lt;c1&gt;</bpt>import pdb; pdb.set_trace()<ept i='1'>&lt;/c1&gt;</ept>) and type the following when you get to the PDB prompt while running the tests:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Para ello coloque un punto de ruptura PDB en las pruebas como se describió anteriormente (<bpt i='1' x='1'>&lt;c1&gt;</bpt>import pdb; pdb.set_trace()<ept i='1'>&lt;/c1&gt;</ept>) y escriba lo siguiente cuando llegue a la parte PDB durante la ejecución de pruebas:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This will print a tuple like</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto imprimirá una tupla como</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>containing an IP address and port where you can access the same test site that the testbrowser is working with, in a real browser.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>que contiene una dirección IP y el puerto donde se puede acceder al sitio con el que testbrowser está trabajando, en un navegador real.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A functional test is more focused on a single &quot;vertical&quot; of functionality, typically linked to a particular use case.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Una prueba funcional se centra más en una sola &quot;vertical&quot; de funcionalidad, por lo general vinculada a un caso de uso en particular.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For a functional test, it <bpt i='0' x='0'>&lt;e0&gt;</bpt>may<ept i='0'>&lt;/e0&gt;</ept> be acceptable to examine the internal state of the portal (using <bpt i='1' x='1'>&lt;s1&gt;</bpt>self.portal<ept i='1'>&lt;/s1&gt;</ept> and the <bpt i='2' x='2'>&lt;s2&gt;</bpt>PloneTestCase.FunctionalTestCase<ept i='2'>&lt;/s2&gt;</ept> class to build a test suite) to provide assertions.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Para una prueba funcional <bpt i='0' x='0'>&lt;e0&gt;</bpt>puede<ept i='0'>&lt;/e0&gt;</ept> que sea aceptable examinar el estado interno del portal (usando <bpt i='1' x='1'>&lt;s1&gt;</bpt>self.portal<ept i='1'>&lt;/s1&gt;</ept> y la clase <bpt i='2' x='2'>&lt;s2&gt;</bpt>PloneTestCase.FunctionalTestCase<ept i='2'>&lt;/s2&gt;</ept> para construir un conjunto de pruebas) para proporcionar afirmaciones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A system test, by contrast, makes no such assumptions.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En contraste, una prueba de sistema no hace tales afirmaciones.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Ideally, you should be able to point a <bpt i='3' x='3'>&lt;s3&gt;</bpt>zope.testbrowser<ept i='3'>&lt;/s3&gt;</ept> test at a remote site running a fresh installation of your system, and have the tests pass.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Idealmente, debería estar en la capacidad de apuntar a la prueba <bpt i='3' x='3'>&lt;s3&gt;</bpt>zope.testbrowser<ept i='3'>&lt;/s3&gt;</ept> en un sitio remoto ejecutando una instalación nueva de su sistema, y pasar la pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Beyond that, the tools used to write a system test are the same.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Más allá de eso, las herramientas utilizadas para escribir una prueba de sistema son los mismas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is only the approach to testing that changes.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Es sólo el enfoque de la prueba lo que cambia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Whether you need one, or the other, or both, will depend on the level of rigour you need in your tests, and how your system is constructed.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Ya sea que necesite una o la otra, o ambas, dependerá del nivel de rigor que necesita en sus pruebas, y cómo su sistema está construido.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In general, though, true system tests are more rare than functional (integration) tests and unit tests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Sin embargo en general, las pruebas reales de sistema son más raras que las funcionales (de integración) y unitarias.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using zope.testrecorder to record functional tests</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usando zope.testrecorder para grabar pruebas funcionales</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The zope.testrecorder product brings us full-circle: functional tests are recorded from within the browser, and saved to a runnable test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El producto zope.testrecorder nos trae el círculo completo: las pruebas funcionales se graban desde el navegador, y se guardan en una prueba ejecutable.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Functional tests using <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.testbrowser<ept i='0'>&lt;/s0&gt;</ept> save us from clicking around the browser to regression test UI, but writing them could still be easier.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Las pruebas funcionales que utilizan <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.testbrowser<ept i='0'>&lt;/s0&gt;</ept> nos salvan de hacer clic por todo el navegador para la interfaz de usuario de pruebas de regresión, pero incluso la escritura de ellas puede ser más fácil.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With complex templates, it can sometimes be difficult to find out what actual links and form fields the testbrowser test should be looking for, and what text to use in assertions.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Con plantillas complejas, a veces puede ser difícil saber qué enlaces y campos de formulario de la prueba testbrowser debería estar buscando, y que texto debería utilizar en las afirmaciones. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is where <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.testrecorder<ept i='0'>&lt;/s0&gt;</ept> comes in.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Aquí es donde entra <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.testrecorder<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The theory is that you click around the UI only once, and then render the history of what you did to a runnable testbrowser test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La teoría es que navegue por la interfaz de usuario sólo una vez, y luego renderizar la historia de lo que hizo para una prueba de testbrowser ejecutable.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i='1' x='1'>&lt;s1&gt;</bpt>zope.testrecorder<ept i='1'>&lt;/s1&gt;</ept> can even create <bpt i='2' x='2'>&lt;a2&gt;</bpt>Selenium<ept i='2'>&lt;/a2&gt;</ept> tests - an alternative form of functional tests which runs in the browser (i.e. it automates your browser right before your eyes) and thus supports JavaScript, but which cannot be run as part of an automated test run without a browser.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg><bpt i='1' x='1'>&lt;s1&gt;</bpt>zope.testrecorder<ept i='1'>&lt;/s1&gt;</ept> puede incluso crear pruebas <bpt i='2' x='2'>&lt;a2&gt;</bpt>Selenium<ept i='2'>&lt;/a2&gt;</ept>- una forma alternativa de pruebas funcionales que se ejecutan en el navegador (es decir, que automatiza el navegador frente a sus ojos) y por lo tanto compatibles con JavaScript, pero no se pueden ejecutar como parte de una prueba automatizada ejecutándose sin un navegador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Installing <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.testrecorder<ept i='0'>&lt;/s0&gt;</ept> is simple.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>instalar <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.testrecorder<ept i='0'>&lt;/s0&gt;</ept> es simple.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First, check it out from Zope's subversion repository:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Primero obtenga una copia desde el repositorio de subversión de Zope:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See <bpt i='0' x='0'>&lt;s0&gt;</bpt>INSTALL.txt<ept i='0'>&lt;/s0&gt;</ept> for further instructions, but the easiest way to install it in a Zope 2 instance is just to put it in your <bpt i='1' x='1'>&lt;s1&gt;</bpt>Products<ept i='1'>&lt;/s1&gt;</ept> directory: Copy <bpt i='2' x='2'>&lt;s2&gt;</bpt>zope.testrecorder/src/zope/testrecorder<ept i='2'>&lt;/s2&gt;</ept> as a product into <bpt i='3' x='3'>&lt;s3&gt;</bpt>Products/testrecorder<ept i='3'>&lt;/s3&gt;</ept> and restart Zope.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Vea <bpt i='0' x='0'>&lt;s0&gt;</bpt>INSTALL.txt<ept i='0'>&lt;/s0&gt;</ept> para obtener más instrucciones, pero la manera más fácil de instalarla en una instancia Zope 2 es simplemente ponerla en su directorio <bpt i='1' x='1'>&lt;s1&gt;</bpt>Products<ept i='1'>&lt;/s1&gt;</ept>: Copie <bpt i='2' x='2'>&lt;s2&gt;</bpt>zope.testrecorder/src/zope/testrecorder<ept i='2'>&lt;/s2&gt;</ept> como un producto dentro de <bpt i='3' x='3'>&lt;s3&gt;</bpt>Products/testrecorder<ept i='3'>&lt;/s3&gt;</ept> y reinicie Zope.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Then, go to the ZMI and add a <bpt i='4' x='4'>&lt;s4&gt;</bpt>Test Recorder<ept i='4'>&lt;/s4&gt;</ept> object in the root of your Zope instance.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Luego vaya a la ZMI y agregue un objeto <bpt i='4' x='4'>&lt;s4&gt;</bpt>Test Recorder<ept i='4'>&lt;/s4&gt;</ept>en el root de su instancia Zope.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Call it e.g. <bpt i='5' x='5'>&lt;s5&gt;</bpt>test-recorder<ept i='5'>&lt;/s5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Colóquele un nombre como: <bpt i='5' x='5'>&lt;s5&gt;</bpt>test-recorder<ept i='5'>&lt;/s5&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Presuming you run Zope on localhost:8080, you should now be able to go to <bpt i='0' x='0'>&lt;s0&gt;</bpt>http://localhost:8080/test-recorder/index.html<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Asumiendo que está corriendo su Zope en localhost:8080, ahora debería ser capaz de ir a <bpt i='0' x='0'>&lt;s0&gt;</bpt>http://localhost:8080/test-recorder/index.html<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You should see a page something like this:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usted debería ver en la página algo como esto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i='0' x='0'>&lt;s0&gt;</bpt>NOTE:<ept i='0'>&lt;/s0&gt;</ept> Like most things, <bpt i='1' x='1'>&lt;s1&gt;</bpt>zope.testrecorder<ept i='1'>&lt;/s1&gt;</ept> seems to work better in Firefox than in other browsers.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg><bpt i='0' x='0'>&lt;s0&gt;</bpt>NOTA:<ept i='0'>&lt;/s0&gt;</ept> Como la mayoría de las cosas, <bpt i='1' x='1'>&lt;s1&gt;</bpt>zope.testrecorder<ept i='1'>&lt;/s1&gt;</ept> pareciera trabajar mejor en Firefox que en otros navegadores.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now, enter the address of your Plone site (or indeed any web site), e.g. <bpt i='0' x='0'>&lt;s0&gt;</bpt>http://localhost:8080/Plone<ept i='0'>&lt;/s0&gt;</ept> and click Go.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Ahora introduzca la dirección de su sitio Plone (o de hecho cualquier sitio web), ejemplo: <bpt i='0' x='0'>&lt;s0&gt;</bpt>http://localhost:8080/Plone<ept i='0'>&lt;/s0&gt;</ept> y haga clic en Go (ir). </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can perform any number of operations, e.g. logging in and clicking around the UI.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usted puede realizar cualquier número de operaciones, por ejemplo, el iniciar sesión y hacer clic por la interfaz de usuario.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you wish to add a comment to your test run, as you would add free text inside a doctest, click the <bpt i='1' x='1'>&lt;s1&gt;</bpt>Add comment<ept i='1'>&lt;/s1&gt;</ept> button.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si desea agregar un comentario a la ejecución de su prueba, tal como agregaría texto libre dentro de un doctest, haga clic en el botón <bpt i='1' x='1'>&lt;s1&gt;</bpt>Add comment (añadir comentario)<ept i='1'>&lt;/s1&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you wish to verify that some text appears on the page, highlight that text, shift-click on it, and select &quot;Check text appears on page&quot;:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si usted desea verificar si un texto aparece en la página, seleccione el texto, haga un shift-clic sobre él y seleccione &quot;Check text appears on page&quot; (&quot;revisar si un texto aparece en la página&quot;):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you are done, click <bpt i='0' x='0'>&lt;s0&gt;</bpt>Stop recording<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Cuando finalice haga clic en <bpt i='0' x='0'>&lt;s0&gt;</bpt>Stop recording (detener la grabación)<ept i='0'>&lt;/s0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can then choose to render the test as a <bpt i='1' x='1'>&lt;s1&gt;</bpt>Python doctest<ept i='1'>&lt;/s1&gt;</ept> and you will get something like:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>A continuación, puede optar por renderizar la prueba como un <bpt i='1' x='1'>&lt;s1&gt;</bpt>doctest de Python<ept i='1'>&lt;/s1&gt;</ept> y obtendrá algo como esto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Create the browser object we'll be using.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Crear el objeto de navegador que vamos a utilizar.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A test comment.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Un comentario de prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can then paste this into a doctest file, and perform any post-processing or make any changes that may be necessary to make the test more generally valid.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>A continuación, puede pegar esto en un archivo doctest, y realizar cualquier procesamiento posterior o hacer cambios que sean necesarios para hacer la prueba más valida desde un punto de vista general.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Tips for using zope.testrecorder</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Consejos al usar zope.testrecorder</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It's best if you have a rough script in front of you before you start recording tests, or you may get lost afterwards.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Es mejor si tiene un guión así sea un borrador, delante de usted antes de empezar las pruebas de grabación, o puede perderse después.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Make good use of the <bpt i='0' x='0'>&lt;s0&gt;</bpt>Add comment<ept i='0'>&lt;/s0&gt;</ept> button to state what you are testing before you test it, so that the final doctest will make sense.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Haga un buen uso del botón para <bpt i='0' x='0'>&lt;s0&gt;</bpt>añadir comentarios<ept i='0'>&lt;/s0&gt;</ept> para indicar lo que usted probará antes de probarlo, para que el doctest resultante tenga sentido.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Careful where you click</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Cuidado donde hace clic</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some parts of the Plone UI are more ephemeral than others.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Algunas partes de la interfaz de usuario de Plone son más efímeras que otras.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It may not be a good idea to rely on links in the <bpt i='0' x='0'>&lt;s0&gt;</bpt>Recent<ept i='0'>&lt;/s0&gt;</ept> portlet, for example.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Puede que no sea buena idea contar con enlaces en el portlet <bpt i='0' x='0'>&lt;s0&gt;</bpt>Recientes<ept i='0'>&lt;/s0&gt;</ept>, por ejemplo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Think about what operations will provide the most general and valid test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Piense en que operaciones proporcionarán la prueba más general y válida.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It will save you time in the long run.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto le ahorrará tiempo a largo plazo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Set up your site beforehand</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Configure su sitio de antemano</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Recall from the section on <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.testbrowser<ept i='0'>&lt;/s0&gt;</ept> that we set up users and basic site structure with calls to the Python APIs instead of using testbrowser to manipulate the &quot;site setup&quot; screents.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Recordemos la sección sobre <bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.testbrowser<ept i='0'>&lt;/s0&gt;</ept> donde definimos usuarios y estructura básica del sitio, con llamadas a los API de Python en lugar de usar testbrowser para manipular las pantallas de &quot;Configuración de sitio&quot;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When using <bpt i='1' x='1'>&lt;s1&gt;</bpt>zope.testrecorder<ept i='1'>&lt;/s1&gt;</ept> you may want to set up the same users with the same user names and passwords, and the same site structure before you start recording to test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Cuando usa <bpt i='1' x='1'>&lt;s1&gt;</bpt>zope.testrecorder<ept i='1'>&lt;/s1&gt;</ept> es posible que desee para definir los mismos usuarios con los mismos nombres de usuario y contraseñas, y la misma estructura del sitio antes de iniciar la grabación para pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise, you may need to change some of the values of the test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>De lo contrario, puede que tenga que cambiar algunos de los valores de la prueba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Check the doctest</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Revisar el doctest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.testrecorder<ept i='0'>&lt;/s0&gt;</ept> is a time-saving tool.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg><bpt i='0' x='0'>&lt;s0&gt;</bpt>zope.testrecorder<ept i='0'>&lt;/s0&gt;</ept> es una herramienta para ahorrar tiempo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sometimes, it may end up referring to parts of the page that can't be guaranteed to be consistent (such as randomly generated ids of content objects), and sometimes you may have gone on a detour and ended up with a test that contains irrelevant or duplicate sections.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>A veces, puede terminar haciendo referencia a partes de la página que no se puede garantizar que sean consistentes (por ejemplo, generación aleatoria de identificadores para objetos de contenido), y a veces puede haber tomado un desvío y terminado con una prueba que contiene secciones duplicada o irrelevante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Always fix up your test (and run it!) afterwards, to make sure that the test remains valid for the future - otherwise, you will end up clicking around the UI in anger again before you know it.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Siempre arregle su prueba ¡y ejecútela! después, para asegurarse de que la prueba sigue siendo válida para el futuro, de lo contrario, terminará haciendo clics con rabia por la interfaz de usuario nuevamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Determining the Code Coverage of your Test Suite</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Determinando la cobertura del código de su conjunto de pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Explanation for how to use the Zope test runner's built in code coverage features to prove the quality of your test suite.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Explicación de cómo utilizar el Zope test runner's (runner de prueba Zope) construido en cobertura de código para probar la calidad de su conjunto de prueba</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The better your test suite's coverage, the lower the likelihood that some modification to your code will break another piece of functionality in some unanticipated way.  But, how do you <bpt i='0' x='0'>&lt;s0&gt;</bpt>know the quality<ept i='0'>&lt;/s0&gt;</ept> of your test coverage?  Zope's test runner comes with several features to help you do just that.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Entre mejor sea la cobertura de su conjunto de pruebas, menor será la probabilidad de que algunas modificaciones a su código dañen otra parte de la funcionalidad en alguna manera inesperada. Pero, ¿cómo se <bpt i='0' x='0'>&lt;s0&gt;</bpt>conoce la calidad<ept i='0'>&lt;/s0&gt;</ept> de la cobertura de su prueba? el Zope's test runner viene con varias características que le ayudarán a hacer precisamente eso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But first, let's say you've written some code with a Python conditional like the following:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Pero primero, vamos a decir que ha escrito un poco de código con un condicional Python como el siguiente:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># we need to do some more complex</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># tenemos que hacer cómputos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># computation to handle odd numbers</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg># mas complejos para manejar números impares</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The comments and function call in the else clause are symbolic of some advanced coding that's required to handle all odd numbers.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Los comentarios y llamada de función en la cláusula &quot;else&quot; son simbólicos de algunas codificaciones avanzadas que son requeridas en el manejo de todos los números impares.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now, as you've no doubt learned while reading this tutorial, testing is important.  But what if for one reason or another, all the test cases you've come up with during testing amount to even numbers when you get to the aforementioned block of code.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Ahora, como sin duda ha aprendido al leer este tutorial, es que las pruebas son importante. Pero que pasa si por una u otra razón, todos los casos de prueba con los que ha surgido durante las pruebas llegan a números pares cuando obtiene el bloque de códigos ya mencionado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this were the case, you'd have a big risk of unanticipated code breakage to the way that you handle odd numbers.  This is something that you'd ideally cover in your test suite.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si este fuera el caso tendría un gran riesgo de ruptura de código no anticipada para la manera en que maneja números impares. Esto es algo que realmente tiene que cubrir en su conjunto de pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Discovering the untested sections of your code</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Descubriendo las secciones no probadas de su código</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You've learned how to run your test suite in this tutorial.  Zope's test runner accepts an optional parameter called <bpt i='0' x='0'>&lt;s0&gt;</bpt>--coverage<ept i='0'>&lt;/s0&gt;</ept>.  When passed a path to a directory, Zope will generate some high-level output and produce a coverage file for each of the Python modules in your product or package.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Usted ha aprendido a cómo ejecutar su conjunto de pruebas en este tutorial. Zope's test runner acepta un parámetro opcional llamado <bpt i='0' x='0'>&lt;s0&gt;</bpt>--coverage<ept i='0'>&lt;/s0&gt;</ept>. Cuando se le pasa una ruta a un directorio, Zope generará una salida de alto nivel y producirá un archivo de cobertura para cada uno de los módulos de Python en su producto o paquete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In full, running your test suite with the coverage option enabled looks like:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>En total, ejecutar el conjunto de pruebas con la opción de cobertura activada se vería así:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i='0' x='0'>&lt;s0&gt;</bpt>Note<ept i='0'>&lt;/s0&gt;</ept>: Running your tests with the coverage option enabled takes significantly longer (as in ~10 times or more) than without, so this is something to be done occasionally to gauge your work, rather than each time you run your tests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg><bpt i='0' x='0'>&lt;s0&gt;</bpt>Nota<ept i='0'>&lt;/s0&gt;</ept>: la ejecución de pruebas con la opción de cobertura activada toma mucho más tiempo  (aproximadamente 10 veces o más) que si no estuviera activada, así que esto es algo que se hace de vez en cuando para calibrar su trabajo, en lugar hacerlo cada vez que ejecute sus pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>At the end of running your test suite, you'll get some immediate output like the following, which includes lines of code and your coverage percentage:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Al final de la ejecución de su conjunto de pruebas, obtendrá un resultado inmediato como el siguiente, que incluye líneas de código y su porcentaje de cobertura:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If all you're looking for is a quick status report, this should suffice.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si todo lo que está buscando es un informe rápido sobre la situación, esto debería ser suficiente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, if you want to dig deeper, head to the directory you listed in the <bpt i='0' x='0'>&lt;s0&gt;</bpt>--coverage<ept i='0'>&lt;/s0&gt;</ept> option.  <bpt i='1' x='1'>&lt;s1&gt;</bpt>Note:<ept i='1'>&lt;/s1&gt;</ept> The files may be preceded with dots, thus requiring an <bpt i='2' x='2'>&lt;s2&gt;</bpt>ls -a<ept i='2'>&lt;/s2&gt;</ept> in order to reach the coverage files.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Sin embargo si desea nadar más profundo, vaya al directorio que listo en la opción <bpt i='0' x='0'>&lt;s0&gt;</bpt>--coverage<ept i='0'>&lt;/s0&gt;</ept>.  <bpt i='1' x='1'>&lt;s1&gt;</bpt>Nota:<ept i='1'>&lt;/s1&gt;</ept> Los archivos pueden ser precedidos por puntos, lo que requiere un <bpt i='2' x='2'>&lt;s2&gt;</bpt>ls -a<ept i='2'>&lt;/s2&gt;</ept> con el fin de llegar a los archivos de cobertura.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A sample file may look like the following:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Un ejemplo de archivo puede lucir de la siguiente manera:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It's really just your file with some meaningful data proceeding each line.  Anything with a <bpt i='0' x='0'>&lt;s0&gt;</bpt>1:<ept i='0'>&lt;/s0&gt;</ept> signifies that your code was at least touched during the running of the test suite.  The higher the number, the more often your code was touched.  Perhaps this is intentional and signifies really good coverage in other cases, it's may be either unavoidable or could even signify that the high level of coverage wouldn't actually be required.  The <bpt i='1' x='1'>&lt;s1&gt;</bpt>&gt;&gt;&gt;&gt;&gt;&gt;<ept i='1'>&lt;/s1&gt;</ept> means that you've missed a line and you should consider coming up with a test scenario or more that will touch the line of code in question.  The number of untested lines divided by total lines gives you your coverage percentage.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Esto es realmente sólo su archivo con algunos datos significativos procediendo cada línea. Cualquier cosa con un <bpt i='0' x='0'>&lt;s0&gt;</bpt>1:<ept i='0'>&lt;/s0&gt;</ept> significa que su código fue por lo menos tanteado durante la ejecución del conjunto de pruebas. Cuanto mayor sea el número, más a menudo su código fue tanteado. Tal vez esto sea intencional y represente una cobertura muy buena en otros casos, puede que sea inevitable e incluso podría significar que el alto nivel de cobertura en realidad no sería necesario. La <bpt i='1' x='1'>&lt;s1&gt;</bpt>&gt;&gt;&gt;&gt;&gt;&gt;<ept i='1'>&lt;/s1&gt;</ept> significa que se ha pasado una línea y debería considerar un escenario de prueba o más para revisar esta línea de código en cuestión. El número de líneas no probadas dividido por el total de líneas le da el porcentaje de cobertura.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If what you really want is eye-candy</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si lo que quiere es algo vistoso</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you want pretty graphs to provide for you boss to include in a report or to make a client feel better about the quality of code they are receiving, <bpt i='0' x='0'>&lt;s0&gt;</bpt>z3c.coverage<ept i='0'>&lt;/s0&gt;</ept> takes the contents of the output files and creates pretty summaries.  Get z3c.coverage from subversion via the following:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Si desea gráficos bonitos para darle a su jefe incluidos en un informe o para que un cliente se sienta mejor con respecto a la calidad del código que está recibiendo, <bpt i='0' x='0'>&lt;s0&gt;</bpt>z3c.coverage<ept i='0'>&lt;/s0&gt;</ept> toma el contenido de los archivos de salida y crea resúmenes vistosos. Obtenga z3c.coverage desde subversión a través de lo siguiente: </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Create a directory within your previously created coverage directory.  We call it reports.  Run the coveragereport.py module with the source being you coverage output and the destination, your newly created reports directory.  See the following:</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Cree un directorio en el directorio de cobertura previamente creado. Nosotros lo llamamos reports. (informes). Ejecute el módulo coveragereport.py con la fuente siendo su salida de cobertura y el destino, del directorio reports recién creado. Vea lo siguiente:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You should now be able to open <bpt i='0' x='0'>&lt;s0&gt;</bpt>$HOME/coverage/reports/all.html<ept i='0'>&lt;/s0&gt;</ept> within your browser for a pretty output like the one below.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Ahora debería pode abrir <bpt i='0' x='0'>&lt;s0&gt;</bpt>$HOME/coverage/reports/all.html<ept i='0'>&lt;/s0&gt;</ept> dentro de su navegador para obtener una salida muy similar a la siguiente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With this information available, you can start to make conclusions about how you may work your way towards better coverage of your product.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Con esta información disponible, puede comenzar a sacar conclusiones acerca de cómo puede trabajar su camino hacia una mejor cobertura para su producto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Testing examples</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Ejemplos de pruebas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, we list a few packages and projects that demonstrate good test coverage</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Aquí listamos algunos paquetes y proyectos que demuestren una buena cobertura de pruebas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Testing is best learned by example.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La ejecución de pruebas se aprender mejor mediante ejemplos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It can be very instructive to read through the tests written by other developers and learn what they test, what they don't test and how they write their tests.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Puede ser muy instructivo leer a través de las pruebas escritas por otros desarrolladores y aprender lo que prueban, lo que no y cómo escriben sus pruebas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i='0' x='0'>&lt;a0&gt;</bpt>example.tests<ept i='0'>&lt;/a0&gt;</ept>, which we have already mentioned, contains an example of each of the different types of tests covered in this tutorial.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg><bpt i='0' x='0'>&lt;a0&gt;</bpt>example.tests<ept i='0'>&lt;/a0&gt;</ept>, que ya hemos mencionado, contiene un ejemplo para cada uno de los diferentes tipos de pruebas estudiadas en este tutorial.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The test setup code is well-commented, with the intention that this package should provide good boilerplate for developers setting up a new project.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>El código de setup (configuración) de la prueba está bien comentado, con la intención de que este paquete proporcione un buen documento para los desarrolladores en la creación de un nuevo proyecto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i='0' x='0'>&lt;a0&gt;</bpt>Plone itself<ept i='0'>&lt;/a0&gt;</ept> has more than 1,600 tests at the time of writing.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg><bpt i='0' x='0'>&lt;a0&gt;</bpt>Plone per se<ept i='0'>&lt;/a0&gt;</ept> cuenta con más de 1.600 pruebas al momento de la escritura.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Most of these are integration tests using unit-test syntax with PloneTestCase.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La mayoría de estas son pruebas de integración utilizando sintaxis prueba-unitaria con PloneTestCase.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i='0' x='0'>&lt;a0&gt;</bpt>RichDocument<ept i='0'>&lt;/a0&gt;</ept> has a basic <bpt i='1' x='1'>&lt;s1&gt;</bpt>test_setup.py<ept i='1'>&lt;/s1&gt;</ept> integration test.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg><bpt i='0' x='0'>&lt;a0&gt;</bpt>RichDocument<ept i='0'>&lt;/a0&gt;</ept> tiene una básica <bpt i='1' x='1'>&lt;s1&gt;</bpt>test_setup.py<ept i='1'>&lt;/s1&gt;</ept> prueba de integración.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a good example of the kind of testing you may want to do to ensure that your package installs cleanly.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Este es un buen ejemplo de la clase de prueba que es posible que desee hacer para asegurar que su paquete instale limpiamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i='0' x='0'>&lt;a0&gt;</bpt>borg.project<ept i='0'>&lt;/a0&gt;</ept> contains a <bpt i='1' x='1'>&lt;a1&gt;</bpt>README.txt<ept i='1'>&lt;/a1&gt;</ept> file with an integration doctest demonstrating how it is used.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg><bpt i='0' x='0'>&lt;a0&gt;</bpt>borg.project<ept i='0'>&lt;/a0&gt;</ept> contiene un archivo <bpt i='1' x='1'>&lt;a1&gt;</bpt>README.txt<ept i='1'>&lt;/a1&gt;</ept> con un doctest de integración demostrando como usarle.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It has only a single test module, <bpt i='2' x='2'>&lt;a2&gt;</bpt>tests.py<ept i='2'>&lt;/a2&gt;</ept>, which performs the same setup as <bpt i='3' x='3'>&lt;s3&gt;</bpt>base.py<ept i='3'>&lt;/s3&gt;</ept> and <bpt i='4' x='4'>&lt;s4&gt;</bpt>test_integration_doctest.py<ept i='4'>&lt;/s4&gt;</ept> from <bpt i='5' x='5'>&lt;s5&gt;</bpt>example.tests<ept i='5'>&lt;/s5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Tiene un sólo modulo de prueba <bpt i='2' x='2'>&lt;a2&gt;</bpt>tests.py<ept i='2'>&lt;/a2&gt;</ept>, el cual realiza el mismo setup que <bpt i='3' x='3'>&lt;s3&gt;</bpt>base.py<ept i='3'>&lt;/s3&gt;</ept> y <bpt i='4' x='4'>&lt;s4&gt;</bpt>test_integration_doctest.py<ept i='4'>&lt;/s4&gt;</ept> de <bpt i='5' x='5'>&lt;s5&gt;</bpt>example.tests<ept i='5'>&lt;/s5&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Many of the tests in the <bpt i='0' x='0'>&lt;a0&gt;</bpt>plone.app.controlpanel<ept i='0'>&lt;/a0&gt;</ept> package use basic test-browser functional tests to verify that the Plone control panels work as expected.</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>La mayoría de pruebas en el paquete <bpt i='0' x='0'>&lt;a0&gt;</bpt>plone.app.controlpanel<ept i='0'>&lt;/a0&gt;</ept> utilizan pruebas test-browser (prueba-navegador) funcionales para verificar que los paneles de control en Plone funcionen correctamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Feel free edit or comment on this page if you have more examples to add!</seg>
      </tuv>
      <tuv xml:lang="ES-VE">
        <seg>Siéntase en plena libertad de editar o comentar en esta página si ¡posee más ejemplos para agregar!</seg>
      </tuv>
    </tu>
  </body>
</tmx>
